
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  000029b8  00002a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016bc  00000000  00000000  00002b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cb6  00000000  00000000  00004228  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00004ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  0000507e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  0000526e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  0000767a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  000089f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00009bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  00009d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000a07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aa4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 52 11 	call	0x22a4	; 0x22a4 <main>
      7a:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e8       	ldi	r26, 0x86	; 134
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e8       	ldi	r24, 0x86	; 134
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e8       	ldi	r22, 0x86	; 134
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 26 12 	jmp	0x244c	; 0x244c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e2 57       	subi	r30, 0x72	; 114
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <LCD_init>:

#include"Calculator.h"
int KeyPad_Row[]={R0,R1,R2,R3};
int KeyPad_Col[]={C0,C1,C2,C3};
void LCD_init(void)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	6d 97       	sbiw	r28, 0x1d	; 29
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a0 ea       	ldi	r26, 0xA0	; 160
     e02:	b1 e4       	ldi	r27, 0x41	; 65
     e04:	89 8f       	std	Y+25, r24	; 0x19
     e06:	9a 8f       	std	Y+26, r25	; 0x1a
     e08:	ab 8f       	std	Y+27, r26	; 0x1b
     e0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0c:	69 8d       	ldd	r22, Y+25	; 0x19
     e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	4a ef       	ldi	r20, 0xFA	; 250
     e1a:	54 e4       	ldi	r21, 0x44	; 68
     e1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	8d 8b       	std	Y+21, r24	; 0x15
     e26:	9e 8b       	std	Y+22, r25	; 0x16
     e28:	af 8b       	std	Y+23, r26	; 0x17
     e2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e2c:	6d 89       	ldd	r22, Y+21	; 0x15
     e2e:	7e 89       	ldd	r23, Y+22	; 0x16
     e30:	8f 89       	ldd	r24, Y+23	; 0x17
     e32:	98 8d       	ldd	r25, Y+24	; 0x18
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e8       	ldi	r20, 0x80	; 128
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e40:	88 23       	and	r24, r24
     e42:	2c f4       	brge	.+10     	; 0xe4e <LCD_init+0x66>
		__ticks = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9c 8b       	std	Y+20, r25	; 0x14
     e4a:	8b 8b       	std	Y+19, r24	; 0x13
     e4c:	3f c0       	rjmp	.+126    	; 0xecc <LCD_init+0xe4>
	else if (__tmp > 65535)
     e4e:	6d 89       	ldd	r22, Y+21	; 0x15
     e50:	7e 89       	ldd	r23, Y+22	; 0x16
     e52:	8f 89       	ldd	r24, Y+23	; 0x17
     e54:	98 8d       	ldd	r25, Y+24	; 0x18
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	3f ef       	ldi	r19, 0xFF	; 255
     e5a:	4f e7       	ldi	r20, 0x7F	; 127
     e5c:	57 e4       	ldi	r21, 0x47	; 71
     e5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e62:	18 16       	cp	r1, r24
     e64:	4c f5       	brge	.+82     	; 0xeb8 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e66:	69 8d       	ldd	r22, Y+25	; 0x19
     e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e2       	ldi	r20, 0x20	; 32
     e74:	51 e4       	ldi	r21, 0x41	; 65
     e76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	9c 8b       	std	Y+20, r25	; 0x14
     e8c:	8b 8b       	std	Y+19, r24	; 0x13
     e8e:	0f c0       	rjmp	.+30     	; 0xeae <LCD_init+0xc6>
     e90:	88 ec       	ldi	r24, 0xC8	; 200
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9a 8b       	std	Y+18, r25	; 0x12
     e96:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e98:	89 89       	ldd	r24, Y+17	; 0x11
     e9a:	9a 89       	ldd	r25, Y+18	; 0x12
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <LCD_init+0xb4>
     ea0:	9a 8b       	std	Y+18, r25	; 0x12
     ea2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea4:	8b 89       	ldd	r24, Y+19	; 0x13
     ea6:	9c 89       	ldd	r25, Y+20	; 0x14
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	9c 8b       	std	Y+20, r25	; 0x14
     eac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eae:	8b 89       	ldd	r24, Y+19	; 0x13
     eb0:	9c 89       	ldd	r25, Y+20	; 0x14
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	69 f7       	brne	.-38     	; 0xe90 <LCD_init+0xa8>
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb8:	6d 89       	ldd	r22, Y+21	; 0x15
     eba:	7e 89       	ldd	r23, Y+22	; 0x16
     ebc:	8f 89       	ldd	r24, Y+23	; 0x17
     ebe:	98 8d       	ldd	r25, Y+24	; 0x18
     ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	9c 8b       	std	Y+20, r25	; 0x14
     eca:	8b 8b       	std	Y+19, r24	; 0x13
     ecc:	8b 89       	ldd	r24, Y+19	; 0x13
     ece:	9c 89       	ldd	r25, Y+20	; 0x14
     ed0:	98 8b       	std	Y+16, r25	; 0x10
     ed2:	8f 87       	std	Y+15, r24	; 0x0f
     ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed6:	98 89       	ldd	r25, Y+16	; 0x10
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <LCD_init+0xf0>
     edc:	98 8b       	std	Y+16, r25	; 0x10
     ede:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(20);
	DDIR_LCD_Control_PINS |= (1<<LCD_EN | 1<<LCD_RW | 1<<LCD_RS) ;
     ee0:	a4 e3       	ldi	r26, 0x34	; 52
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e4 e3       	ldi	r30, 0x34	; 52
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	87 60       	ori	r24, 0x07	; 7
     eec:	8c 93       	st	X, r24
	LCD_Control_PINS &= ~(1<<LCD_EN | 1<<LCD_RW | 1<<LCD_RS) ;
     eee:	a5 e3       	ldi	r26, 0x35	; 53
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e5 e3       	ldi	r30, 0x35	; 53
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 7f       	andi	r24, 0xF8	; 248
     efa:	8c 93       	st	X, r24

	DDIR_LCD_PORT |= 0xFF ;
     efc:	e1 e3       	ldi	r30, 0x31	; 49
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	e1 e3       	ldi	r30, 0x31	; 49
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	80 83       	st	Z, r24
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a0 e7       	ldi	r26, 0x70	; 112
     f10:	b1 e4       	ldi	r27, 0x41	; 65
     f12:	8b 87       	std	Y+11, r24	; 0x0b
     f14:	9c 87       	std	Y+12, r25	; 0x0c
     f16:	ad 87       	std	Y+13, r26	; 0x0d
     f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f20:	9e 85       	ldd	r25, Y+14	; 0x0e
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	4a ef       	ldi	r20, 0xFA	; 250
     f28:	54 e4       	ldi	r21, 0x44	; 68
     f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	8f 83       	std	Y+7, r24	; 0x07
     f34:	98 87       	std	Y+8, r25	; 0x08
     f36:	a9 87       	std	Y+9, r26	; 0x09
     f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e8       	ldi	r20, 0x80	; 128
     f48:	5f e3       	ldi	r21, 0x3F	; 63
     f4a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f4e:	88 23       	and	r24, r24
     f50:	2c f4       	brge	.+10     	; 0xf5c <LCD_init+0x174>
		__ticks = 1;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
     f5a:	3f c0       	rjmp	.+126    	; 0xfda <LCD_init+0x1f2>
	else if (__tmp > 65535)
     f5c:	6f 81       	ldd	r22, Y+7	; 0x07
     f5e:	78 85       	ldd	r23, Y+8	; 0x08
     f60:	89 85       	ldd	r24, Y+9	; 0x09
     f62:	9a 85       	ldd	r25, Y+10	; 0x0a
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	3f ef       	ldi	r19, 0xFF	; 255
     f68:	4f e7       	ldi	r20, 0x7F	; 127
     f6a:	57 e4       	ldi	r21, 0x47	; 71
     f6c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f70:	18 16       	cp	r1, r24
     f72:	4c f5       	brge	.+82     	; 0xfc6 <LCD_init+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f74:	6b 85       	ldd	r22, Y+11	; 0x0b
     f76:	7c 85       	ldd	r23, Y+12	; 0x0c
     f78:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e2       	ldi	r20, 0x20	; 32
     f82:	51 e4       	ldi	r21, 0x41	; 65
     f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	bc 01       	movw	r22, r24
     f8e:	cd 01       	movw	r24, r26
     f90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	9e 83       	std	Y+6, r25	; 0x06
     f9a:	8d 83       	std	Y+5, r24	; 0x05
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <LCD_init+0x1d4>
     f9e:	88 ec       	ldi	r24, 0xC8	; 200
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	9c 83       	std	Y+4, r25	; 0x04
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <LCD_init+0x1c2>
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	9e 83       	std	Y+6, r25	; 0x06
     fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	69 f7       	brne	.-38     	; 0xf9e <LCD_init+0x1b6>
     fc4:	14 c0       	rjmp	.+40     	; 0xfee <LCD_init+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc6:	6f 81       	ldd	r22, Y+7	; 0x07
     fc8:	78 85       	ldd	r23, Y+8	; 0x08
     fca:	89 85       	ldd	r24, Y+9	; 0x09
     fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <LCD_init+0x1fe>
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

	LCD_CLear_Screen();
     fee:	0e 94 11 08 	call	0x1022	; 0x1022 <LCD_CLear_Screen>

	LCD_Send_Command(0x02);
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	0e 94 1b 08 	call	0x1036	; 0x1036 <LCD_Send_Command>
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
     ff8:	88 e3       	ldi	r24, 0x38	; 56
     ffa:	0e 94 1b 08 	call	0x1036	; 0x1036 <LCD_Send_Command>

	LCD_Send_Command(LCD_ENTRY_MODE);
     ffe:	86 e0       	ldi	r24, 0x06	; 6
    1000:	0e 94 1b 08 	call	0x1036	; 0x1036 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
    1004:	80 e8       	ldi	r24, 0x80	; 128
    1006:	0e 94 1b 08 	call	0x1036	; 0x1036 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
    100a:	8f e0       	ldi	r24, 0x0F	; 15
    100c:	0e 94 1b 08 	call	0x1036	; 0x1036 <LCD_Send_Command>
}
    1010:	6d 96       	adiw	r28, 0x1d	; 29
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <LCD_CLear_Screen>:

void LCD_CLear_Screen ()
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Command(LCD_CLEAR_SCREEN);
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	0e 94 1b 08 	call	0x1036	; 0x1036 <LCD_Send_Command>
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <LCD_Send_Command>:

void LCD_Send_Command(unsigned char command)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	89 83       	std	Y+1, r24	; 0x01
	LCD_Kick();
	LCD_PORT = (LCD_PORT & 0xF0) | (command & 0x0F);
	LCD_Control_PINS &= ~ ((1<<LCD_RW)|(1<<LCD_RS));
	LCD_Kick();
#endif
	LCD_PORT = command;
    1042:	e2 e3       	ldi	r30, 0x32	; 50
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	80 83       	st	Z, r24
	LCD_Control_PINS &= ~((1 << LCD_RW) | (1 << LCD_RS));
    104a:	a5 e3       	ldi	r26, 0x35	; 53
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e3       	ldi	r30, 0x35	; 53
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8c 7f       	andi	r24, 0xFC	; 252
    1056:	8c 93       	st	X, r24
	LCD_Kick();
    1058:	0e 94 32 08 	call	0x1064	; 0x1064 <LCD_Kick>
}
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <LCD_Kick>:
    LCD_PORT_Control&=~(1<<RW_SW | 1<<RS_SW);
    LCD_Kick();
}*/

void LCD_Kick()
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	68 97       	sbiw	r28, 0x18	; 24
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
	LCD_Control_PINS&=~(1<<LCD_EN);
    1078:	a5 e3       	ldi	r26, 0x35	; 53
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e3       	ldi	r30, 0x35	; 53
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8b 7f       	andi	r24, 0xFB	; 251
    1084:	8c 93       	st	X, r24
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a0 e0       	ldi	r26, 0x00	; 0
    108c:	bf e3       	ldi	r27, 0x3F	; 63
    108e:	8d 8b       	std	Y+21, r24	; 0x15
    1090:	9e 8b       	std	Y+22, r25	; 0x16
    1092:	af 8b       	std	Y+23, r26	; 0x17
    1094:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1096:	6d 89       	ldd	r22, Y+21	; 0x15
    1098:	7e 89       	ldd	r23, Y+22	; 0x16
    109a:	8f 89       	ldd	r24, Y+23	; 0x17
    109c:	98 8d       	ldd	r25, Y+24	; 0x18
    109e:	2b ea       	ldi	r18, 0xAB	; 171
    10a0:	3a ea       	ldi	r19, 0xAA	; 170
    10a2:	4a e2       	ldi	r20, 0x2A	; 42
    10a4:	50 e4       	ldi	r21, 0x40	; 64
    10a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	89 8b       	std	Y+17, r24	; 0x11
    10b0:	9a 8b       	std	Y+18, r25	; 0x12
    10b2:	ab 8b       	std	Y+19, r26	; 0x13
    10b4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10b6:	69 89       	ldd	r22, Y+17	; 0x11
    10b8:	7a 89       	ldd	r23, Y+18	; 0x12
    10ba:	8b 89       	ldd	r24, Y+19	; 0x13
    10bc:	9c 89       	ldd	r25, Y+20	; 0x14
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e8       	ldi	r20, 0x80	; 128
    10c4:	5f e3       	ldi	r21, 0x3F	; 63
    10c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10ca:	88 23       	and	r24, r24
    10cc:	1c f4       	brge	.+6      	; 0x10d4 <LCD_Kick+0x70>
		__ticks = 1;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	88 8b       	std	Y+16, r24	; 0x10
    10d2:	91 c0       	rjmp	.+290    	; 0x11f6 <LCD_Kick+0x192>
	else if (__tmp > 255)
    10d4:	69 89       	ldd	r22, Y+17	; 0x11
    10d6:	7a 89       	ldd	r23, Y+18	; 0x12
    10d8:	8b 89       	ldd	r24, Y+19	; 0x13
    10da:	9c 89       	ldd	r25, Y+20	; 0x14
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4f e7       	ldi	r20, 0x7F	; 127
    10e2:	53 e4       	ldi	r21, 0x43	; 67
    10e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10e8:	18 16       	cp	r1, r24
    10ea:	0c f0       	brlt	.+2      	; 0x10ee <LCD_Kick+0x8a>
    10ec:	7b c0       	rjmp	.+246    	; 0x11e4 <LCD_Kick+0x180>
	{
		_delay_ms(__us / 1000.0);
    10ee:	6d 89       	ldd	r22, Y+21	; 0x15
    10f0:	7e 89       	ldd	r23, Y+22	; 0x16
    10f2:	8f 89       	ldd	r24, Y+23	; 0x17
    10f4:	98 8d       	ldd	r25, Y+24	; 0x18
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	4a e7       	ldi	r20, 0x7A	; 122
    10fc:	54 e4       	ldi	r21, 0x44	; 68
    10fe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	8c 87       	std	Y+12, r24	; 0x0c
    1108:	9d 87       	std	Y+13, r25	; 0x0d
    110a:	ae 87       	std	Y+14, r26	; 0x0e
    110c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1110:	7d 85       	ldd	r23, Y+13	; 0x0d
    1112:	8e 85       	ldd	r24, Y+14	; 0x0e
    1114:	9f 85       	ldd	r25, Y+15	; 0x0f
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	4a ef       	ldi	r20, 0xFA	; 250
    111c:	54 e4       	ldi	r21, 0x44	; 68
    111e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	88 87       	std	Y+8, r24	; 0x08
    1128:	99 87       	std	Y+9, r25	; 0x09
    112a:	aa 87       	std	Y+10, r26	; 0x0a
    112c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    112e:	68 85       	ldd	r22, Y+8	; 0x08
    1130:	79 85       	ldd	r23, Y+9	; 0x09
    1132:	8a 85       	ldd	r24, Y+10	; 0x0a
    1134:	9b 85       	ldd	r25, Y+11	; 0x0b
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e8       	ldi	r20, 0x80	; 128
    113c:	5f e3       	ldi	r21, 0x3F	; 63
    113e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1142:	88 23       	and	r24, r24
    1144:	2c f4       	brge	.+10     	; 0x1150 <LCD_Kick+0xec>
		__ticks = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9f 83       	std	Y+7, r25	; 0x07
    114c:	8e 83       	std	Y+6, r24	; 0x06
    114e:	3f c0       	rjmp	.+126    	; 0x11ce <LCD_Kick+0x16a>
	else if (__tmp > 65535)
    1150:	68 85       	ldd	r22, Y+8	; 0x08
    1152:	79 85       	ldd	r23, Y+9	; 0x09
    1154:	8a 85       	ldd	r24, Y+10	; 0x0a
    1156:	9b 85       	ldd	r25, Y+11	; 0x0b
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	3f ef       	ldi	r19, 0xFF	; 255
    115c:	4f e7       	ldi	r20, 0x7F	; 127
    115e:	57 e4       	ldi	r21, 0x47	; 71
    1160:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1164:	18 16       	cp	r1, r24
    1166:	4c f5       	brge	.+82     	; 0x11ba <LCD_Kick+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1168:	6c 85       	ldd	r22, Y+12	; 0x0c
    116a:	7d 85       	ldd	r23, Y+13	; 0x0d
    116c:	8e 85       	ldd	r24, Y+14	; 0x0e
    116e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e2       	ldi	r20, 0x20	; 32
    1176:	51 e4       	ldi	r21, 0x41	; 65
    1178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	9f 83       	std	Y+7, r25	; 0x07
    118e:	8e 83       	std	Y+6, r24	; 0x06
    1190:	0f c0       	rjmp	.+30     	; 0x11b0 <LCD_Kick+0x14c>
    1192:	88 ec       	ldi	r24, 0xC8	; 200
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9d 83       	std	Y+5, r25	; 0x05
    1198:	8c 83       	std	Y+4, r24	; 0x04
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <LCD_Kick+0x13a>
    11a2:	9d 83       	std	Y+5, r25	; 0x05
    11a4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	9f 81       	ldd	r25, Y+7	; 0x07
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	9f 83       	std	Y+7, r25	; 0x07
    11ae:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b0:	8e 81       	ldd	r24, Y+6	; 0x06
    11b2:	9f 81       	ldd	r25, Y+7	; 0x07
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	69 f7       	brne	.-38     	; 0x1192 <LCD_Kick+0x12e>
    11b8:	24 c0       	rjmp	.+72     	; 0x1202 <LCD_Kick+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ba:	68 85       	ldd	r22, Y+8	; 0x08
    11bc:	79 85       	ldd	r23, Y+9	; 0x09
    11be:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9f 83       	std	Y+7, r25	; 0x07
    11cc:	8e 83       	std	Y+6, r24	; 0x06
    11ce:	8e 81       	ldd	r24, Y+6	; 0x06
    11d0:	9f 81       	ldd	r25, Y+7	; 0x07
    11d2:	9b 83       	std	Y+3, r25	; 0x03
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <LCD_Kick+0x176>
    11de:	9b 83       	std	Y+3, r25	; 0x03
    11e0:	8a 83       	std	Y+2, r24	; 0x02
    11e2:	0f c0       	rjmp	.+30     	; 0x1202 <LCD_Kick+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11e4:	69 89       	ldd	r22, Y+17	; 0x11
    11e6:	7a 89       	ldd	r23, Y+18	; 0x12
    11e8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ea:	9c 89       	ldd	r25, Y+20	; 0x14
    11ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	88 8b       	std	Y+16, r24	; 0x10
    11f6:	88 89       	ldd	r24, Y+16	; 0x10
    11f8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	8a 95       	dec	r24
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <LCD_Kick+0x198>
    1200:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(0.5);
    LCD_Control_PINS|=(1<<LCD_EN);
    1202:	a5 e3       	ldi	r26, 0x35	; 53
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e3       	ldi	r30, 0x35	; 53
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	84 60       	ori	r24, 0x04	; 4
    120e:	8c 93       	st	X, r24
}
    1210:	68 96       	adiw	r28, 0x18	; 24
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <LCD_Send_Character>:

void LCD_Send_Character(unsigned char Character)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	89 83       	std	Y+1, r24	; 0x01
    LCD_PORT = (LCD_PORT & 0xF0) | (Character & 0x0F);
    LCD_Control_PINS|=(1<<LCD_RS);
    LCD_Control_PINS&=~(LCD_RW);
    LCD_Kick();
#endif
	LCD_PORT = Character;
    122e:	e2 e3       	ldi	r30, 0x32	; 50
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	80 83       	st	Z, r24
	LCD_Control_PINS |= (1 << LCD_RS);
    1236:	a5 e3       	ldi	r26, 0x35	; 53
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e3       	ldi	r30, 0x35	; 53
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	81 60       	ori	r24, 0x01	; 1
    1242:	8c 93       	st	X, r24
	LCD_Control_PINS &= ~(1<<LCD_RW);
    1244:	a5 e3       	ldi	r26, 0x35	; 53
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e5 e3       	ldi	r30, 0x35	; 53
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8d 7f       	andi	r24, 0xFD	; 253
    1250:	8c 93       	st	X, r24
	LCD_Kick();
    1252:	0e 94 32 08 	call	0x1064	; 0x1064 <LCD_Kick>
}
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <LCD_GOTO_XY>:
void LCD_GOTO_XY(unsigned char Line,unsigned char Position)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <LCD_GOTO_XY+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <LCD_GOTO_XY+0x8>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	6a 83       	std	Y+2, r22	; 0x02
    if(Position>=0 && Position<16)
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	80 31       	cpi	r24, 0x10	; 16
    1272:	c0 f4       	brcc	.+48     	; 0x12a4 <LCD_GOTO_XY+0x46>
    {
        switch(Line)
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3c 83       	std	Y+4, r19	; 0x04
    127c:	2b 83       	std	Y+3, r18	; 0x03
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	31 f0       	breq	.+12     	; 0x1292 <LCD_GOTO_XY+0x34>
    1286:	2b 81       	ldd	r18, Y+3	; 0x03
    1288:	3c 81       	ldd	r19, Y+4	; 0x04
    128a:	21 30       	cpi	r18, 0x01	; 1
    128c:	31 05       	cpc	r19, r1
    128e:	31 f0       	breq	.+12     	; 0x129c <LCD_GOTO_XY+0x3e>
    1290:	09 c0       	rjmp	.+18     	; 0x12a4 <LCD_GOTO_XY+0x46>
        {
        	case 0: LCD_Send_Command((LCD_BEGIN_AT_FIRST_RAW)+Position);break;
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 58       	subi	r24, 0x80	; 128
    1296:	0e 94 1b 08 	call	0x1036	; 0x1036 <LCD_Send_Command>
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <LCD_GOTO_XY+0x46>
        	case 1: LCD_Send_Command((LCD_BEGIN_AT_SECOND_RAW)+Position);break;
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	80 54       	subi	r24, 0x40	; 64
    12a0:	0e 94 1b 08 	call	0x1036	; 0x1036 <LCD_Send_Command>
        	default: break;
        }
    }
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <LCD_Send_String>:

void LCD_Send_String(unsigned char *String_TO_Disp)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <LCD_Send_String+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <LCD_Send_String+0x8>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9c 83       	std	Y+4, r25	; 0x04
    12c0:	8b 83       	std	Y+3, r24	; 0x03
    int count;
    //int Size_OF_String = sizeof(String_TO_Disp)/sizeof(String_TO_Disp[0]);
    for(count=0;( (count<16) && (String_TO_Disp[count]!=0));count++)
    12c2:	1a 82       	std	Y+2, r1	; 0x02
    12c4:	19 82       	std	Y+1, r1	; 0x01
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <LCD_Send_String+0x34>
    {
    	LCD_Send_Character(String_TO_Disp[count]);
    12c8:	29 81       	ldd	r18, Y+1	; 0x01
    12ca:	3a 81       	ldd	r19, Y+2	; 0x02
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	fc 01       	movw	r30, r24
    12d2:	e2 0f       	add	r30, r18
    12d4:	f3 1f       	adc	r31, r19
    12d6:	80 81       	ld	r24, Z
    12d8:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_Send_Character>

void LCD_Send_String(unsigned char *String_TO_Disp)
{
    int count;
    //int Size_OF_String = sizeof(String_TO_Disp)/sizeof(String_TO_Disp[0]);
    for(count=0;( (count<16) && (String_TO_Disp[count]!=0));count++)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	80 31       	cpi	r24, 0x10	; 16
    12ec:	91 05       	cpc	r25, r1
    12ee:	54 f4       	brge	.+20     	; 0x1304 <LCD_Send_String+0x52>
    12f0:	29 81       	ldd	r18, Y+1	; 0x01
    12f2:	3a 81       	ldd	r19, Y+2	; 0x02
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	fc 01       	movw	r30, r24
    12fa:	e2 0f       	add	r30, r18
    12fc:	f3 1f       	adc	r31, r19
    12fe:	80 81       	ld	r24, Z
    1300:	88 23       	and	r24, r24
    1302:	11 f7       	brne	.-60     	; 0x12c8 <LCD_Send_String+0x16>
		for (; ((count < 32) && (String_TO_Disp[count] != 0)); count++)
		{
			LCD_Send_Character(String_TO_Disp[count]);
		}
	}*/
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <LCD_Display_Number>:

void LCD_Display_Number(int Number)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	29 97       	sbiw	r28, 0x09	; 9
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	99 87       	std	Y+9, r25	; 0x09
    1328:	88 87       	std	Y+8, r24	; 0x08
    char Str[7];
    sprintf(Str,"%d",Number);
    132a:	00 d0       	rcall	.+0      	; 0x132c <LCD_Display_Number+0x1a>
    132c:	00 d0       	rcall	.+0      	; 0x132e <LCD_Display_Number+0x1c>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <LCD_Display_Number+0x1e>
    1330:	ed b7       	in	r30, 0x3d	; 61
    1332:	fe b7       	in	r31, 0x3e	; 62
    1334:	31 96       	adiw	r30, 0x01	; 1
    1336:	ce 01       	movw	r24, r28
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	91 83       	std	Z+1, r25	; 0x01
    133c:	80 83       	st	Z, r24
    133e:	80 e6       	ldi	r24, 0x60	; 96
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	93 83       	std	Z+3, r25	; 0x03
    1344:	82 83       	std	Z+2, r24	; 0x02
    1346:	88 85       	ldd	r24, Y+8	; 0x08
    1348:	99 85       	ldd	r25, Y+9	; 0x09
    134a:	95 83       	std	Z+5, r25	; 0x05
    134c:	84 83       	std	Z+4, r24	; 0x04
    134e:	0e 94 39 12 	call	0x2472	; 0x2472 <sprintf>
    1352:	8d b7       	in	r24, 0x3d	; 61
    1354:	9e b7       	in	r25, 0x3e	; 62
    1356:	06 96       	adiw	r24, 0x06	; 6
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	9e bf       	out	0x3e, r25	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	8d bf       	out	0x3d, r24	; 61
    LCD_Send_String((unsigned char*)Str);
    1362:	ce 01       	movw	r24, r28
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCD_Send_String>
}
    136a:	29 96       	adiw	r28, 0x09	; 9
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <LDC_Display_Real_Number>:

void LDC_Display_Real_Number(double Number)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	6a 97       	sbiw	r28, 0x1a	; 26
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	6e 8b       	std	Y+22, r22	; 0x16
    1392:	7f 8b       	std	Y+23, r23	; 0x17
    1394:	88 8f       	std	Y+24, r24	; 0x18
    1396:	99 8f       	std	Y+25, r25	; 0x19
    int NUM_First=Number;
    1398:	6e 89       	ldd	r22, Y+22	; 0x16
    139a:	7f 89       	ldd	r23, Y+23	; 0x17
    139c:	88 8d       	ldd	r24, Y+24	; 0x18
    139e:	99 8d       	ldd	r25, Y+25	; 0x19
    13a0:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9d 83       	std	Y+5, r25	; 0x05
    13aa:	8c 83       	std	Y+4, r24	; 0x04
    int NUM_Second=(Number-NUM_First)*1000;
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	aa 27       	eor	r26, r26
    13b2:	97 fd       	sbrc	r25, 7
    13b4:	a0 95       	com	r26
    13b6:	ba 2f       	mov	r27, r26
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    13c0:	9b 01       	movw	r18, r22
    13c2:	ac 01       	movw	r20, r24
    13c4:	6e 89       	ldd	r22, Y+22	; 0x16
    13c6:	7f 89       	ldd	r23, Y+23	; 0x17
    13c8:	88 8d       	ldd	r24, Y+24	; 0x18
    13ca:	99 8d       	ldd	r25, Y+25	; 0x19
    13cc:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	4a e7       	ldi	r20, 0x7A	; 122
    13de:	54 e4       	ldi	r21, 0x44	; 68
    13e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	9b 83       	std	Y+3, r25	; 0x03
    13f6:	8a 83       	std	Y+2, r24	; 0x02
    char Str[16];
    char Sign =(Number<0)?'-':':';
    13f8:	6e 89       	ldd	r22, Y+22	; 0x16
    13fa:	7f 89       	ldd	r23, Y+23	; 0x17
    13fc:	88 8d       	ldd	r24, Y+24	; 0x18
    13fe:	99 8d       	ldd	r25, Y+25	; 0x19
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	1c f4       	brge	.+6      	; 0x1416 <LDC_Display_Real_Number+0x9a>
    1410:	8d e2       	ldi	r24, 0x2D	; 45
    1412:	8a 8f       	std	Y+26, r24	; 0x1a
    1414:	02 c0       	rjmp	.+4      	; 0x141a <LDC_Display_Real_Number+0x9e>
    1416:	9a e3       	ldi	r25, 0x3A	; 58
    1418:	9a 8f       	std	Y+26, r25	; 0x1a
    141a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    141c:	89 83       	std	Y+1, r24	; 0x01
    sprintf(Str,"%c %d. %04d",Sign,NUM_First,NUM_Second);
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8d b7       	in	r24, 0x3d	; 61
    1426:	9e b7       	in	r25, 0x3e	; 62
    1428:	0a 97       	sbiw	r24, 0x0a	; 10
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	9e bf       	out	0x3e, r25	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	8d bf       	out	0x3d, r24	; 61
    1434:	ed b7       	in	r30, 0x3d	; 61
    1436:	fe b7       	in	r31, 0x3e	; 62
    1438:	31 96       	adiw	r30, 0x01	; 1
    143a:	ce 01       	movw	r24, r28
    143c:	06 96       	adiw	r24, 0x06	; 6
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	80 83       	st	Z, r24
    1442:	83 e6       	ldi	r24, 0x63	; 99
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	93 83       	std	Z+3, r25	; 0x03
    1448:	82 83       	std	Z+2, r24	; 0x02
    144a:	35 83       	std	Z+5, r19	; 0x05
    144c:	24 83       	std	Z+4, r18	; 0x04
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	9d 81       	ldd	r25, Y+5	; 0x05
    1452:	97 83       	std	Z+7, r25	; 0x07
    1454:	86 83       	std	Z+6, r24	; 0x06
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	91 87       	std	Z+9, r25	; 0x09
    145c:	80 87       	std	Z+8, r24	; 0x08
    145e:	0e 94 39 12 	call	0x2472	; 0x2472 <sprintf>
    1462:	8d b7       	in	r24, 0x3d	; 61
    1464:	9e b7       	in	r25, 0x3e	; 62
    1466:	0a 96       	adiw	r24, 0x0a	; 10
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	9e bf       	out	0x3e, r25	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	8d bf       	out	0x3d, r24	; 61
    LCD_Send_String((unsigned char*)Str);
    1472:	ce 01       	movw	r24, r28
    1474:	06 96       	adiw	r24, 0x06	; 6
    1476:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCD_Send_String>
}
    147a:	6a 96       	adiw	r28, 0x1a	; 26
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <KeyPad_init>:

void KeyPad_init()
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_DDIR &=~(1<<R0|1<<R1|1<<R2|1<<R3);
    1494:	aa e3       	ldi	r26, 0x3A	; 58
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ea e3       	ldi	r30, 0x3A	; 58
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 7f       	andi	r24, 0xF0	; 240
    14a0:	8c 93       	st	X, r24
	KEYPAD_DDIR |=(1<<C0|1<<C1|1<<C2|1<<C3);
    14a2:	aa e3       	ldi	r26, 0x3A	; 58
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ea e3       	ldi	r30, 0x3A	; 58
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 6f       	ori	r24, 0xF0	; 240
    14ae:	8c 93       	st	X, r24
    KEYPAD_PORT |= 0xF0;
    14b0:	ab e3       	ldi	r26, 0x3B	; 59
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	eb e3       	ldi	r30, 0x3B	; 59
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 6f       	ori	r24, 0xF0	; 240
    14bc:	8c 93       	st	X, r24
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <KeyPad_GetKey>:

unsigned char KeyPad_GetKey()
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	a3 97       	sbiw	r28, 0x23	; 35
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    short i,j;
    //KEYPAD_PORT &=~((1<<KeyPad_Col[0])|(1<<KeyPad_Col[1])|(1<<KeyPad_Col[2])|(1<<KeyPad_Col[3]));
    //while(KEYPAD_PIN!=0xF0);
    while(1)
    {
    	for(i=0;i<4;i++)
    14d8:	18 a2       	std	Y+32, r1	; 0x20
    14da:	1f 8e       	std	Y+31, r1	; 0x1f
    14dc:	1b c2       	rjmp	.+1078   	; 0x1914 <KeyPad_GetKey+0x450>
    	    {
    			KEYPAD_PORT|=((1<<KeyPad_Col[0])|(1<<KeyPad_Col[1])|(1<<KeyPad_Col[2])|(1<<KeyPad_Col[3]));
    14de:	ab e3       	ldi	r26, 0x3B	; 59
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	eb e3       	ldi	r30, 0x3B	; 59
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	58 2f       	mov	r21, r24
    14ea:	20 91 96 01 	lds	r18, 0x0196
    14ee:	30 91 97 01 	lds	r19, 0x0197
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <KeyPad_GetKey+0x38>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	2a 95       	dec	r18
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <KeyPad_GetKey+0x34>
    1500:	48 2f       	mov	r20, r24
    1502:	20 91 98 01 	lds	r18, 0x0198
    1506:	30 91 99 01 	lds	r19, 0x0199
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <KeyPad_GetKey+0x50>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	2a 95       	dec	r18
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <KeyPad_GetKey+0x4c>
    1518:	48 2b       	or	r20, r24
    151a:	20 91 9a 01 	lds	r18, 0x019A
    151e:	30 91 9b 01 	lds	r19, 0x019B
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 c0       	rjmp	.+4      	; 0x152c <KeyPad_GetKey+0x68>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	2a 95       	dec	r18
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <KeyPad_GetKey+0x64>
    1530:	48 2b       	or	r20, r24
    1532:	20 91 9c 01 	lds	r18, 0x019C
    1536:	30 91 9d 01 	lds	r19, 0x019D
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <KeyPad_GetKey+0x80>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	2a 95       	dec	r18
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <KeyPad_GetKey+0x7c>
    1548:	84 2b       	or	r24, r20
    154a:	85 2b       	or	r24, r21
    154c:	8c 93       	st	X, r24
    			KEYPAD_PORT&= ~(1<<KeyPad_Col[i]);
    154e:	ab e3       	ldi	r26, 0x3B	; 59
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	eb e3       	ldi	r30, 0x3B	; 59
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    155c:	98 a1       	ldd	r25, Y+32	; 0x20
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	fc 01       	movw	r30, r24
    1564:	ea 56       	subi	r30, 0x6A	; 106
    1566:	fe 4f       	sbci	r31, 0xFE	; 254
    1568:	20 81       	ld	r18, Z
    156a:	31 81       	ldd	r19, Z+1	; 0x01
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <KeyPad_GetKey+0xb2>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	2a 95       	dec	r18
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <KeyPad_GetKey+0xae>
    157a:	80 95       	com	r24
    157c:	84 23       	and	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	a0 ea       	ldi	r26, 0xA0	; 160
    1586:	b0 e4       	ldi	r27, 0x40	; 64
    1588:	89 8f       	std	Y+25, r24	; 0x19
    158a:	9a 8f       	std	Y+26, r25	; 0x1a
    158c:	ab 8f       	std	Y+27, r26	; 0x1b
    158e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1590:	69 8d       	ldd	r22, Y+25	; 0x19
    1592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a ef       	ldi	r20, 0xFA	; 250
    159e:	54 e4       	ldi	r21, 0x44	; 68
    15a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	8d 8b       	std	Y+21, r24	; 0x15
    15aa:	9e 8b       	std	Y+22, r25	; 0x16
    15ac:	af 8b       	std	Y+23, r26	; 0x17
    15ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15b0:	6d 89       	ldd	r22, Y+21	; 0x15
    15b2:	7e 89       	ldd	r23, Y+22	; 0x16
    15b4:	8f 89       	ldd	r24, Y+23	; 0x17
    15b6:	98 8d       	ldd	r25, Y+24	; 0x18
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15c4:	88 23       	and	r24, r24
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <KeyPad_GetKey+0x10e>
		__ticks = 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9c 8b       	std	Y+20, r25	; 0x14
    15ce:	8b 8b       	std	Y+19, r24	; 0x13
    15d0:	3f c0       	rjmp	.+126    	; 0x1650 <KeyPad_GetKey+0x18c>
	else if (__tmp > 65535)
    15d2:	6d 89       	ldd	r22, Y+21	; 0x15
    15d4:	7e 89       	ldd	r23, Y+22	; 0x16
    15d6:	8f 89       	ldd	r24, Y+23	; 0x17
    15d8:	98 8d       	ldd	r25, Y+24	; 0x18
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	3f ef       	ldi	r19, 0xFF	; 255
    15de:	4f e7       	ldi	r20, 0x7F	; 127
    15e0:	57 e4       	ldi	r21, 0x47	; 71
    15e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	4c f5       	brge	.+82     	; 0x163c <KeyPad_GetKey+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ea:	69 8d       	ldd	r22, Y+25	; 0x19
    15ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e2       	ldi	r20, 0x20	; 32
    15f8:	51 e4       	ldi	r21, 0x41	; 65
    15fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	9c 8b       	std	Y+20, r25	; 0x14
    1610:	8b 8b       	std	Y+19, r24	; 0x13
    1612:	0f c0       	rjmp	.+30     	; 0x1632 <KeyPad_GetKey+0x16e>
    1614:	88 ec       	ldi	r24, 0xC8	; 200
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9a 8b       	std	Y+18, r25	; 0x12
    161a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    161c:	89 89       	ldd	r24, Y+17	; 0x11
    161e:	9a 89       	ldd	r25, Y+18	; 0x12
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <KeyPad_GetKey+0x15c>
    1624:	9a 8b       	std	Y+18, r25	; 0x12
    1626:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1628:	8b 89       	ldd	r24, Y+19	; 0x13
    162a:	9c 89       	ldd	r25, Y+20	; 0x14
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	9c 8b       	std	Y+20, r25	; 0x14
    1630:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1632:	8b 89       	ldd	r24, Y+19	; 0x13
    1634:	9c 89       	ldd	r25, Y+20	; 0x14
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	69 f7       	brne	.-38     	; 0x1614 <KeyPad_GetKey+0x150>
    163a:	14 c0       	rjmp	.+40     	; 0x1664 <KeyPad_GetKey+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163c:	6d 89       	ldd	r22, Y+21	; 0x15
    163e:	7e 89       	ldd	r23, Y+22	; 0x16
    1640:	8f 89       	ldd	r24, Y+23	; 0x17
    1642:	98 8d       	ldd	r25, Y+24	; 0x18
    1644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	9c 8b       	std	Y+20, r25	; 0x14
    164e:	8b 8b       	std	Y+19, r24	; 0x13
    1650:	8b 89       	ldd	r24, Y+19	; 0x13
    1652:	9c 89       	ldd	r25, Y+20	; 0x14
    1654:	98 8b       	std	Y+16, r25	; 0x10
    1656:	8f 87       	std	Y+15, r24	; 0x0f
    1658:	8f 85       	ldd	r24, Y+15	; 0x0f
    165a:	98 89       	ldd	r25, Y+16	; 0x10
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <KeyPad_GetKey+0x198>
    1660:	98 8b       	std	Y+16, r25	; 0x10
    1662:	8f 87       	std	Y+15, r24	; 0x0f
    	    	_delay_ms(5);
    	        for(j=0;j<4;j++)
    1664:	1e 8e       	std	Y+30, r1	; 0x1e
    1666:	1d 8e       	std	Y+29, r1	; 0x1d
    1668:	4a c1       	rjmp	.+660    	; 0x18fe <KeyPad_GetKey+0x43a>
    	        {
    	            if(!(KEYPAD_PIN & (1<<KeyPad_Row[j])))
    166a:	e9 e3       	ldi	r30, 0x39	; 57
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	fc 01       	movw	r30, r24
    167e:	e2 57       	subi	r30, 0x72	; 114
    1680:	fe 4f       	sbci	r31, 0xFE	; 254
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	a9 01       	movw	r20, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <KeyPad_GetKey+0x1ca>
    168a:	55 95       	asr	r21
    168c:	47 95       	ror	r20
    168e:	8a 95       	dec	r24
    1690:	e2 f7       	brpl	.-8      	; 0x168a <KeyPad_GetKey+0x1c6>
    1692:	ca 01       	movw	r24, r20
    1694:	81 70       	andi	r24, 0x01	; 1
    1696:	90 70       	andi	r25, 0x00	; 0
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	09 f0       	breq	.+2      	; 0x169e <KeyPad_GetKey+0x1da>
    169c:	2b c1       	rjmp	.+598    	; 0x18f4 <KeyPad_GetKey+0x430>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a0 ea       	ldi	r26, 0xA0	; 160
    16a4:	b1 e4       	ldi	r27, 0x41	; 65
    16a6:	8b 87       	std	Y+11, r24	; 0x0b
    16a8:	9c 87       	std	Y+12, r25	; 0x0c
    16aa:	ad 87       	std	Y+13, r26	; 0x0d
    16ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	4a ef       	ldi	r20, 0xFA	; 250
    16bc:	54 e4       	ldi	r21, 0x44	; 68
    16be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8f 83       	std	Y+7, r24	; 0x07
    16c8:	98 87       	std	Y+8, r25	; 0x08
    16ca:	a9 87       	std	Y+9, r26	; 0x09
    16cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <KeyPad_GetKey+0x22c>
		__ticks = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	3f c0       	rjmp	.+126    	; 0x176e <KeyPad_GetKey+0x2aa>
	else if (__tmp > 65535)
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	57 e4       	ldi	r21, 0x47	; 71
    1700:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1704:	18 16       	cp	r1, r24
    1706:	4c f5       	brge	.+82     	; 0x175a <KeyPad_GetKey+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <KeyPad_GetKey+0x28c>
    1732:	88 ec       	ldi	r24, 0xC8	; 200
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <KeyPad_GetKey+0x27a>
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <KeyPad_GetKey+0x26e>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <KeyPad_GetKey+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <KeyPad_GetKey+0x2b6>
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    	            {
    	            	_delay_ms(20);
    	                if(!(KEYPAD_PIN & (1<<KeyPad_Row[j])))
    1782:	e9 e3       	ldi	r30, 0x39	; 57
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    178e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	fc 01       	movw	r30, r24
    1796:	e2 57       	subi	r30, 0x72	; 114
    1798:	fe 4f       	sbci	r31, 0xFE	; 254
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	a9 01       	movw	r20, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <KeyPad_GetKey+0x2e2>
    17a2:	55 95       	asr	r21
    17a4:	47 95       	ror	r20
    17a6:	8a 95       	dec	r24
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <KeyPad_GetKey+0x2de>
    17aa:	ca 01       	movw	r24, r20
    17ac:	81 70       	andi	r24, 0x01	; 1
    17ae:	90 70       	andi	r25, 0x00	; 0
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <KeyPad_GetKey+0x2f2>
    17b4:	9f c0       	rjmp	.+318    	; 0x18f4 <KeyPad_GetKey+0x430>
    	                {
    	                	switch(i)
    17b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17b8:	98 a1       	ldd	r25, Y+32	; 0x20
    17ba:	9b a3       	std	Y+35, r25	; 0x23
    17bc:	8a a3       	std	Y+34, r24	; 0x22
    17be:	4a a1       	ldd	r20, Y+34	; 0x22
    17c0:	5b a1       	ldd	r21, Y+35	; 0x23
    17c2:	41 30       	cpi	r20, 0x01	; 1
    17c4:	51 05       	cpc	r21, r1
    17c6:	c1 f1       	breq	.+112    	; 0x1838 <KeyPad_GetKey+0x374>
    17c8:	8a a1       	ldd	r24, Y+34	; 0x22
    17ca:	9b a1       	ldd	r25, Y+35	; 0x23
    17cc:	82 30       	cpi	r24, 0x02	; 2
    17ce:	91 05       	cpc	r25, r1
    17d0:	34 f4       	brge	.+12     	; 0x17de <KeyPad_GetKey+0x31a>
    17d2:	4a a1       	ldd	r20, Y+34	; 0x22
    17d4:	5b a1       	ldd	r21, Y+35	; 0x23
    17d6:	41 15       	cp	r20, r1
    17d8:	51 05       	cpc	r21, r1
    17da:	71 f0       	breq	.+28     	; 0x17f8 <KeyPad_GetKey+0x334>
    17dc:	8b c0       	rjmp	.+278    	; 0x18f4 <KeyPad_GetKey+0x430>
    17de:	8a a1       	ldd	r24, Y+34	; 0x22
    17e0:	9b a1       	ldd	r25, Y+35	; 0x23
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	91 05       	cpc	r25, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <KeyPad_GetKey+0x326>
    17e8:	47 c0       	rjmp	.+142    	; 0x1878 <KeyPad_GetKey+0x3b4>
    17ea:	4a a1       	ldd	r20, Y+34	; 0x22
    17ec:	5b a1       	ldd	r21, Y+35	; 0x23
    17ee:	43 30       	cpi	r20, 0x03	; 3
    17f0:	51 05       	cpc	r21, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <KeyPad_GetKey+0x332>
    17f4:	60 c0       	rjmp	.+192    	; 0x18b6 <KeyPad_GetKey+0x3f2>
    17f6:	7e c0       	rjmp	.+252    	; 0x18f4 <KeyPad_GetKey+0x430>
    	                	                {
    	                	                    case 0:{
    	                	                                if(j==0) return '7';
    17f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	19 f4       	brne	.+6      	; 0x1806 <KeyPad_GetKey+0x342>
    1800:	57 e3       	ldi	r21, 0x37	; 55
    1802:	59 a3       	std	Y+33, r21	; 0x21
    1804:	8e c0       	rjmp	.+284    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==1) return '4';
    1806:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1808:	9e 8d       	ldd	r25, Y+30	; 0x1e
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	91 05       	cpc	r25, r1
    180e:	19 f4       	brne	.+6      	; 0x1816 <KeyPad_GetKey+0x352>
    1810:	84 e3       	ldi	r24, 0x34	; 52
    1812:	89 a3       	std	Y+33, r24	; 0x21
    1814:	86 c0       	rjmp	.+268    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==2) return '1';
    1816:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1818:	9e 8d       	ldd	r25, Y+30	; 0x1e
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	91 05       	cpc	r25, r1
    181e:	19 f4       	brne	.+6      	; 0x1826 <KeyPad_GetKey+0x362>
    1820:	91 e3       	ldi	r25, 0x31	; 49
    1822:	99 a3       	std	Y+33, r25	; 0x21
    1824:	7e c0       	rjmp	.+252    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==3) return '.';
    1826:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1828:	9e 8d       	ldd	r25, Y+30	; 0x1e
    182a:	83 30       	cpi	r24, 0x03	; 3
    182c:	91 05       	cpc	r25, r1
    182e:	09 f0       	breq	.+2      	; 0x1832 <KeyPad_GetKey+0x36e>
    1830:	61 c0       	rjmp	.+194    	; 0x18f4 <KeyPad_GetKey+0x430>
    1832:	4e e2       	ldi	r20, 0x2E	; 46
    1834:	49 a3       	std	Y+33, r20	; 0x21
    1836:	75 c0       	rjmp	.+234    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                break;
    	                	                             }
    	                	                    case 1:{
    	                	                                if(j==0) return '8';
    1838:	8d 8d       	ldd	r24, Y+29	; 0x1d
    183a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	19 f4       	brne	.+6      	; 0x1846 <KeyPad_GetKey+0x382>
    1840:	58 e3       	ldi	r21, 0x38	; 56
    1842:	59 a3       	std	Y+33, r21	; 0x21
    1844:	6e c0       	rjmp	.+220    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==1) return '5';
    1846:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1848:	9e 8d       	ldd	r25, Y+30	; 0x1e
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	19 f4       	brne	.+6      	; 0x1856 <KeyPad_GetKey+0x392>
    1850:	85 e3       	ldi	r24, 0x35	; 53
    1852:	89 a3       	std	Y+33, r24	; 0x21
    1854:	66 c0       	rjmp	.+204    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==2) return '2';
    1856:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1858:	9e 8d       	ldd	r25, Y+30	; 0x1e
    185a:	82 30       	cpi	r24, 0x02	; 2
    185c:	91 05       	cpc	r25, r1
    185e:	19 f4       	brne	.+6      	; 0x1866 <KeyPad_GetKey+0x3a2>
    1860:	92 e3       	ldi	r25, 0x32	; 50
    1862:	99 a3       	std	Y+33, r25	; 0x21
    1864:	5e c0       	rjmp	.+188    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==3) return '0';
    1866:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1868:	9e 8d       	ldd	r25, Y+30	; 0x1e
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	09 f0       	breq	.+2      	; 0x1872 <KeyPad_GetKey+0x3ae>
    1870:	41 c0       	rjmp	.+130    	; 0x18f4 <KeyPad_GetKey+0x430>
    1872:	40 e3       	ldi	r20, 0x30	; 48
    1874:	49 a3       	std	Y+33, r20	; 0x21
    1876:	55 c0       	rjmp	.+170    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                break;
    	                	                             }
    	                	                   case 2:{
    	                	                                if(j==0) return '9';
    1878:	8d 8d       	ldd	r24, Y+29	; 0x1d
    187a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	19 f4       	brne	.+6      	; 0x1886 <KeyPad_GetKey+0x3c2>
    1880:	59 e3       	ldi	r21, 0x39	; 57
    1882:	59 a3       	std	Y+33, r21	; 0x21
    1884:	4e c0       	rjmp	.+156    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==1) return '6';
    1886:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1888:	9e 8d       	ldd	r25, Y+30	; 0x1e
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	91 05       	cpc	r25, r1
    188e:	19 f4       	brne	.+6      	; 0x1896 <KeyPad_GetKey+0x3d2>
    1890:	86 e3       	ldi	r24, 0x36	; 54
    1892:	89 a3       	std	Y+33, r24	; 0x21
    1894:	46 c0       	rjmp	.+140    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==2) return '3';
    1896:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1898:	9e 8d       	ldd	r25, Y+30	; 0x1e
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	91 05       	cpc	r25, r1
    189e:	19 f4       	brne	.+6      	; 0x18a6 <KeyPad_GetKey+0x3e2>
    18a0:	93 e3       	ldi	r25, 0x33	; 51
    18a2:	99 a3       	std	Y+33, r25	; 0x21
    18a4:	3e c0       	rjmp	.+124    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==3) return '=';
    18a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18aa:	83 30       	cpi	r24, 0x03	; 3
    18ac:	91 05       	cpc	r25, r1
    18ae:	11 f5       	brne	.+68     	; 0x18f4 <KeyPad_GetKey+0x430>
    18b0:	4d e3       	ldi	r20, 0x3D	; 61
    18b2:	49 a3       	std	Y+33, r20	; 0x21
    18b4:	36 c0       	rjmp	.+108    	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                break;
    	                	                             }
    	                	                   case 3:{
    	                	                                if(j==0) return '/';
    18b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	19 f4       	brne	.+6      	; 0x18c4 <KeyPad_GetKey+0x400>
    18be:	5f e2       	ldi	r21, 0x2F	; 47
    18c0:	59 a3       	std	Y+33, r21	; 0x21
    18c2:	2f c0       	rjmp	.+94     	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if(j==1) return '*';
    18c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	19 f4       	brne	.+6      	; 0x18d4 <KeyPad_GetKey+0x410>
    18ce:	8a e2       	ldi	r24, 0x2A	; 42
    18d0:	89 a3       	std	Y+33, r24	; 0x21
    18d2:	27 c0       	rjmp	.+78     	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==2) return '-';
    18d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	91 05       	cpc	r25, r1
    18dc:	19 f4       	brne	.+6      	; 0x18e4 <KeyPad_GetKey+0x420>
    18de:	9d e2       	ldi	r25, 0x2D	; 45
    18e0:	99 a3       	std	Y+33, r25	; 0x21
    18e2:	1f c0       	rjmp	.+62     	; 0x1922 <KeyPad_GetKey+0x45e>
    	                	                                else if (j==3) return '+';
    18e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	91 05       	cpc	r25, r1
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <KeyPad_GetKey+0x430>
    18ee:	4b e2       	ldi	r20, 0x2B	; 43
    18f0:	49 a3       	std	Y+33, r20	; 0x21
    18f2:	17 c0       	rjmp	.+46     	; 0x1922 <KeyPad_GetKey+0x45e>
    	for(i=0;i<4;i++)
    	    {
    			KEYPAD_PORT|=((1<<KeyPad_Col[0])|(1<<KeyPad_Col[1])|(1<<KeyPad_Col[2])|(1<<KeyPad_Col[3]));
    			KEYPAD_PORT&= ~(1<<KeyPad_Col[i]);
    	    	_delay_ms(5);
    	        for(j=0;j<4;j++)
    18f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	9e 8f       	std	Y+30, r25	; 0x1e
    18fc:	8d 8f       	std	Y+29, r24	; 0x1d
    18fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1900:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	91 05       	cpc	r25, r1
    1906:	0c f4       	brge	.+2      	; 0x190a <KeyPad_GetKey+0x446>
    1908:	b0 ce       	rjmp	.-672    	; 0x166a <KeyPad_GetKey+0x1a6>
    short i,j;
    //KEYPAD_PORT &=~((1<<KeyPad_Col[0])|(1<<KeyPad_Col[1])|(1<<KeyPad_Col[2])|(1<<KeyPad_Col[3]));
    //while(KEYPAD_PIN!=0xF0);
    while(1)
    {
    	for(i=0;i<4;i++)
    190a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    190c:	98 a1       	ldd	r25, Y+32	; 0x20
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	98 a3       	std	Y+32, r25	; 0x20
    1912:	8f 8f       	std	Y+31, r24	; 0x1f
    1914:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1916:	98 a1       	ldd	r25, Y+32	; 0x20
    1918:	84 30       	cpi	r24, 0x04	; 4
    191a:	91 05       	cpc	r25, r1
    191c:	0c f4       	brge	.+2      	; 0x1920 <KeyPad_GetKey+0x45c>
    191e:	df cd       	rjmp	.-1090   	; 0x14de <KeyPad_GetKey+0x1a>
    1920:	db cd       	rjmp	.-1098   	; 0x14d8 <KeyPad_GetKey+0x14>
    	                }

    	            }
    	        }
    	    }
    }
    1922:	89 a1       	ldd	r24, Y+33	; 0x21
    LCD_Send_String((unsigned char*)"No KEY Pressed");
    return 'A';
}
    1924:	a3 96       	adiw	r28, 0x23	; 35
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <KEYPAD_CLEAR>:

void KEYPAD_CLEAR()
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	2e 97       	sbiw	r28, 0x0e	; 14
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
	if(KeyPad_GetKey()=='.')
    194a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <KeyPad_GetKey>
    194e:	8e 32       	cpi	r24, 0x2E	; 46
    1950:	09 f0       	breq	.+2      	; 0x1954 <KEYPAD_CLEAR+0x1e>
    1952:	74 c0       	rjmp	.+232    	; 0x1a3c <KEYPAD_CLEAR+0x106>
	{
		LCD_CLear_Screen();
    1954:	0e 94 11 08 	call	0x1022	; 0x1022 <LCD_CLear_Screen>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	aa ef       	ldi	r26, 0xFA	; 250
    195e:	b3 e4       	ldi	r27, 0x43	; 67
    1960:	8b 87       	std	Y+11, r24	; 0x0b
    1962:	9c 87       	std	Y+12, r25	; 0x0c
    1964:	ad 87       	std	Y+13, r26	; 0x0d
    1966:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	6b 85       	ldd	r22, Y+11	; 0x0b
    196a:	7c 85       	ldd	r23, Y+12	; 0x0c
    196c:	8d 85       	ldd	r24, Y+13	; 0x0d
    196e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a ef       	ldi	r20, 0xFA	; 250
    1976:	54 e4       	ldi	r21, 0x44	; 68
    1978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8f 83       	std	Y+7, r24	; 0x07
    1982:	98 87       	std	Y+8, r25	; 0x08
    1984:	a9 87       	std	Y+9, r26	; 0x09
    1986:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1988:	6f 81       	ldd	r22, Y+7	; 0x07
    198a:	78 85       	ldd	r23, Y+8	; 0x08
    198c:	89 85       	ldd	r24, Y+9	; 0x09
    198e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <KEYPAD_CLEAR+0x74>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	3f c0       	rjmp	.+126    	; 0x1a28 <KEYPAD_CLEAR+0xf2>
	else if (__tmp > 65535)
    19aa:	6f 81       	ldd	r22, Y+7	; 0x07
    19ac:	78 85       	ldd	r23, Y+8	; 0x08
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	4c f5       	brge	.+82     	; 0x1a14 <KEYPAD_CLEAR+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <KEYPAD_CLEAR+0xd4>
    19ec:	88 ec       	ldi	r24, 0xC8	; 200
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	8b 83       	std	Y+3, r24	; 0x03
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <KEYPAD_CLEAR+0xc2>
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	8d 81       	ldd	r24, Y+5	; 0x05
    1a02:	9e 81       	ldd	r25, Y+6	; 0x06
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <KEYPAD_CLEAR+0xb6>
    1a12:	14 c0       	rjmp	.+40     	; 0x1a3c <KEYPAD_CLEAR+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	78 85       	ldd	r23, Y+8	; 0x08
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <KEYPAD_CLEAR+0xfe>
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}
}
    1a3c:	2e 96       	adiw	r28, 0x0e	; 14
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <Simple_CALC>:

void Simple_CALC()
{
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	cd 55       	subi	r28, 0x5D	; 93
    1a5c:	d0 40       	sbci	r29, 0x00	; 0
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
	unsigned char Key_Pressed;
	unsigned char First_Digit , Second_Digit , First_Operator , Second_Oparator;
	unsigned char Result , Calc_ERROR=0;
    1a68:	fe 01       	movw	r30, r28
    1a6a:	eb 5a       	subi	r30, 0xAB	; 171
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	10 82       	st	Z, r1
	LCD_CLear_Screen();
    1a70:	0e 94 11 08 	call	0x1022	; 0x1022 <LCD_CLear_Screen>
	Key_Pressed=KeyPad_GetKey();
    1a74:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <KeyPad_GetKey>
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e5 5a       	subi	r30, 0xA5	; 165
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 83       	st	Z, r24
	//KEYPAD_CLEAR();
    First_Digit=Key_Pressed;
    1a80:	de 01       	movw	r26, r28
    1a82:	a6 5a       	subi	r26, 0xA6	; 166
    1a84:	bf 4f       	sbci	r27, 0xFF	; 255
    1a86:	fe 01       	movw	r30, r28
    1a88:	e5 5a       	subi	r30, 0xA5	; 165
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8c 93       	st	X, r24
    LCD_Send_Character(First_Digit);
    1a90:	fe 01       	movw	r30, r28
    1a92:	e6 5a       	subi	r30, 0xA6	; 166
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 81       	ld	r24, Z
    1a98:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_Send_Character>
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ef 5a       	subi	r30, 0xAF	; 175
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	aa ef       	ldi	r26, 0xFA	; 250
    1aa8:	b3 e4       	ldi	r27, 0x43	; 67
    1aaa:	80 83       	st	Z, r24
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	a2 83       	std	Z+2, r26	; 0x02
    1ab0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	8e 01       	movw	r16, r28
    1ab4:	03 5b       	subi	r16, 0xB3	; 179
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab8:	fe 01       	movw	r30, r28
    1aba:	ef 5a       	subi	r30, 0xAF	; 175
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	82 81       	ldd	r24, Z+2	; 0x02
    1ac4:	93 81       	ldd	r25, Z+3	; 0x03
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	80 83       	st	Z, r24
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	a2 83       	std	Z+2, r26	; 0x02
    1ade:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e3 5b       	subi	r30, 0xB3	; 179
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	44 f4       	brge	.+16     	; 0x1b0e <Simple_CALC+0xc0>
		__ticks = 1;
    1afe:	fe 01       	movw	r30, r28
    1b00:	e5 5b       	subi	r30, 0xB5	; 181
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
    1b0c:	64 c0       	rjmp	.+200    	; 0x1bd6 <Simple_CALC+0x188>
	else if (__tmp > 65535)
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e3 5b       	subi	r30, 0xB3	; 179
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	57 e4       	ldi	r21, 0x47	; 71
    1b24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	0c f0       	brlt	.+2      	; 0x1b2e <Simple_CALC+0xe0>
    1b2c:	43 c0       	rjmp	.+134    	; 0x1bb4 <Simple_CALC+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ef 5a       	subi	r30, 0xAF	; 175
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8e 01       	movw	r16, r28
    1b4e:	05 5b       	subi	r16, 0xB5	; 181
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	f8 01       	movw	r30, r16
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
    1b64:	1f c0       	rjmp	.+62     	; 0x1ba4 <Simple_CALC+0x156>
    1b66:	fe 01       	movw	r30, r28
    1b68:	e7 5b       	subi	r30, 0xB7	; 183
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	88 ec       	ldi	r24, 0xC8	; 200
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	80 83       	st	Z, r24
    1b74:	fe 01       	movw	r30, r28
    1b76:	e7 5b       	subi	r30, 0xB7	; 183
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <Simple_CALC+0x130>
    1b82:	fe 01       	movw	r30, r28
    1b84:	e7 5b       	subi	r30, 0xB7	; 183
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	de 01       	movw	r26, r28
    1b8e:	a5 5b       	subi	r26, 0xB5	; 181
    1b90:	bf 4f       	sbci	r27, 0xFF	; 255
    1b92:	fe 01       	movw	r30, r28
    1b94:	e5 5b       	subi	r30, 0xB5	; 181
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	11 96       	adiw	r26, 0x01	; 1
    1ba0:	9c 93       	st	X, r25
    1ba2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e5 5b       	subi	r30, 0xB5	; 181
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	d1 f6       	brne	.-76     	; 0x1b66 <Simple_CALC+0x118>
    1bb2:	27 c0       	rjmp	.+78     	; 0x1c02 <Simple_CALC+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	8e 01       	movw	r16, r28
    1bb6:	05 5b       	subi	r16, 0xB5	; 181
    1bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e3 5b       	subi	r30, 0xB3	; 179
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	80 83       	st	Z, r24
    1bd6:	de 01       	movw	r26, r28
    1bd8:	a9 5b       	subi	r26, 0xB9	; 185
    1bda:	bf 4f       	sbci	r27, 0xFF	; 255
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e5 5b       	subi	r30, 0xB5	; 181
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 81       	ld	r24, Z
    1be4:	91 81       	ldd	r25, Z+1	; 0x01
    1be6:	8d 93       	st	X+, r24
    1be8:	9c 93       	st	X, r25
    1bea:	fe 01       	movw	r30, r28
    1bec:	e9 5b       	subi	r30, 0xB9	; 185
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <Simple_CALC+0x1a6>
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e9 5b       	subi	r30, 0xB9	; 185
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24
    _delay_ms(500);
    Key_Pressed=KeyPad_GetKey();
    1c02:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <KeyPad_GetKey>
    1c06:	fe 01       	movw	r30, r28
    1c08:	e5 5a       	subi	r30, 0xA5	; 165
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 83       	st	Z, r24
    //KEYPAD_CLEAR();
    First_Operator=Key_Pressed;
    1c0e:	de 01       	movw	r26, r28
    1c10:	a8 5a       	subi	r26, 0xA8	; 168
    1c12:	bf 4f       	sbci	r27, 0xFF	; 255
    1c14:	fe 01       	movw	r30, r28
    1c16:	e5 5a       	subi	r30, 0xA5	; 165
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8c 93       	st	X, r24
    LCD_Send_Character(First_Operator);
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e8 5a       	subi	r30, 0xA8	; 168
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_Send_Character>
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	ed 5b       	subi	r30, 0xBD	; 189
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	aa ef       	ldi	r26, 0xFA	; 250
    1c36:	b3 e4       	ldi	r27, 0x43	; 67
    1c38:	80 83       	st	Z, r24
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	a2 83       	std	Z+2, r26	; 0x02
    1c3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	8e 01       	movw	r16, r28
    1c42:	01 5c       	subi	r16, 0xC1	; 193
    1c44:	1f 4f       	sbci	r17, 0xFF	; 255
    1c46:	fe 01       	movw	r30, r28
    1c48:	ed 5b       	subi	r30, 0xBD	; 189
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	60 81       	ld	r22, Z
    1c4e:	71 81       	ldd	r23, Z+1	; 0x01
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	4a ef       	ldi	r20, 0xFA	; 250
    1c5a:	54 e4       	ldi	r21, 0x44	; 68
    1c5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	f8 01       	movw	r30, r16
    1c66:	80 83       	st	Z, r24
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	a2 83       	std	Z+2, r26	; 0x02
    1c6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c6e:	fe 01       	movw	r30, r28
    1c70:	ff 96       	adiw	r30, 0x3f	; 63
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f e3       	ldi	r21, 0x3F	; 63
    1c82:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <Simple_CALC+0x246>
		__ticks = 1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9e af       	std	Y+62, r25	; 0x3e
    1c90:	8d af       	std	Y+61, r24	; 0x3d
    1c92:	46 c0       	rjmp	.+140    	; 0x1d20 <Simple_CALC+0x2d2>
	else if (__tmp > 65535)
    1c94:	fe 01       	movw	r30, r28
    1c96:	ff 96       	adiw	r30, 0x3f	; 63
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	3f ef       	ldi	r19, 0xFF	; 255
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	57 e4       	ldi	r21, 0x47	; 71
    1ca8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	64 f5       	brge	.+88     	; 0x1d08 <Simple_CALC+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	ed 5b       	subi	r30, 0xBD	; 189
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9e af       	std	Y+62, r25	; 0x3e
    1cdc:	8d af       	std	Y+61, r24	; 0x3d
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <Simple_CALC+0x2b0>
    1ce0:	88 ec       	ldi	r24, 0xC8	; 200
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9c af       	std	Y+60, r25	; 0x3c
    1ce6:	8b af       	std	Y+59, r24	; 0x3b
    1ce8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cea:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <Simple_CALC+0x29e>
    1cf0:	9c af       	std	Y+60, r25	; 0x3c
    1cf2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cf6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	9e af       	std	Y+62, r25	; 0x3e
    1cfc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	69 f7       	brne	.-38     	; 0x1ce0 <Simple_CALC+0x292>
    1d06:	16 c0       	rjmp	.+44     	; 0x1d34 <Simple_CALC+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	fe 01       	movw	r30, r28
    1d0a:	ff 96       	adiw	r30, 0x3f	; 63
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9e af       	std	Y+62, r25	; 0x3e
    1d1e:	8d af       	std	Y+61, r24	; 0x3d
    1d20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d24:	9a af       	std	Y+58, r25	; 0x3a
    1d26:	89 af       	std	Y+57, r24	; 0x39
    1d28:	89 ad       	ldd	r24, Y+57	; 0x39
    1d2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <Simple_CALC+0x2de>
    1d30:	9a af       	std	Y+58, r25	; 0x3a
    1d32:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(500);
    Key_Pressed=KeyPad_GetKey();
    1d34:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <KeyPad_GetKey>
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e5 5a       	subi	r30, 0xA5	; 165
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 83       	st	Z, r24
    //KEYPAD_CLEAR();
    Second_Digit=Key_Pressed;
    1d40:	de 01       	movw	r26, r28
    1d42:	a7 5a       	subi	r26, 0xA7	; 167
    1d44:	bf 4f       	sbci	r27, 0xFF	; 255
    1d46:	fe 01       	movw	r30, r28
    1d48:	e5 5a       	subi	r30, 0xA5	; 165
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8c 93       	st	X, r24
    LCD_Send_Character(Second_Digit);
    1d50:	fe 01       	movw	r30, r28
    1d52:	e7 5a       	subi	r30, 0xA7	; 167
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	80 81       	ld	r24, Z
    1d58:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_Send_Character>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	aa ef       	ldi	r26, 0xFA	; 250
    1d62:	b3 e4       	ldi	r27, 0x43	; 67
    1d64:	8d ab       	std	Y+53, r24	; 0x35
    1d66:	9e ab       	std	Y+54, r25	; 0x36
    1d68:	af ab       	std	Y+55, r26	; 0x37
    1d6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d70:	8f a9       	ldd	r24, Y+55	; 0x37
    1d72:	98 ad       	ldd	r25, Y+56	; 0x38
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a ef       	ldi	r20, 0xFA	; 250
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	89 ab       	std	Y+49, r24	; 0x31
    1d86:	9a ab       	std	Y+50, r25	; 0x32
    1d88:	ab ab       	std	Y+51, r26	; 0x33
    1d8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d90:	8b a9       	ldd	r24, Y+51	; 0x33
    1d92:	9c a9       	ldd	r25, Y+52	; 0x34
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <Simple_CALC+0x360>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	98 ab       	std	Y+48, r25	; 0x30
    1daa:	8f a7       	std	Y+47, r24	; 0x2f
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <Simple_CALC+0x3de>
	else if (__tmp > 65535)
    1dae:	69 a9       	ldd	r22, Y+49	; 0x31
    1db0:	7a a9       	ldd	r23, Y+50	; 0x32
    1db2:	8b a9       	ldd	r24, Y+51	; 0x33
    1db4:	9c a9       	ldd	r25, Y+52	; 0x34
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <Simple_CALC+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dca:	8f a9       	ldd	r24, Y+55	; 0x37
    1dcc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	98 ab       	std	Y+48, r25	; 0x30
    1dec:	8f a7       	std	Y+47, r24	; 0x2f
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <Simple_CALC+0x3c0>
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9e a7       	std	Y+46, r25	; 0x2e
    1df6:	8d a7       	std	Y+45, r24	; 0x2d
    1df8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dfa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <Simple_CALC+0x3ae>
    1e00:	9e a7       	std	Y+46, r25	; 0x2e
    1e02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e06:	98 a9       	ldd	r25, Y+48	; 0x30
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	98 ab       	std	Y+48, r25	; 0x30
    1e0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e10:	98 a9       	ldd	r25, Y+48	; 0x30
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <Simple_CALC+0x3a2>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <Simple_CALC+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	98 ab       	std	Y+48, r25	; 0x30
    1e2a:	8f a7       	std	Y+47, r24	; 0x2f
    1e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e30:	9c a7       	std	Y+44, r25	; 0x2c
    1e32:	8b a7       	std	Y+43, r24	; 0x2b
    1e34:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e36:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <Simple_CALC+0x3ea>
    1e3c:	9c a7       	std	Y+44, r25	; 0x2c
    1e3e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    Key_Pressed=KeyPad_GetKey();
    1e40:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <KeyPad_GetKey>
    1e44:	fe 01       	movw	r30, r28
    1e46:	e5 5a       	subi	r30, 0xA5	; 165
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 83       	st	Z, r24
    //KEYPAD_CLEAR();
    Second_Oparator=Key_Pressed;
    1e4c:	de 01       	movw	r26, r28
    1e4e:	a9 5a       	subi	r26, 0xA9	; 169
    1e50:	bf 4f       	sbci	r27, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e5 5a       	subi	r30, 0xA5	; 165
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	8c 93       	st	X, r24
    LCD_Send_Character(Second_Oparator);
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e9 5a       	subi	r30, 0xA9	; 169
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_Send_Character>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	aa ef       	ldi	r26, 0xFA	; 250
    1e6e:	b3 e4       	ldi	r27, 0x43	; 67
    1e70:	8f a3       	std	Y+39, r24	; 0x27
    1e72:	98 a7       	std	Y+40, r25	; 0x28
    1e74:	a9 a7       	std	Y+41, r26	; 0x29
    1e76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6f a1       	ldd	r22, Y+39	; 0x27
    1e7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a ef       	ldi	r20, 0xFA	; 250
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8b a3       	std	Y+35, r24	; 0x23
    1e92:	9c a3       	std	Y+36, r25	; 0x24
    1e94:	ad a3       	std	Y+37, r26	; 0x25
    1e96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e98:	6b a1       	ldd	r22, Y+35	; 0x23
    1e9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <Simple_CALC+0x46c>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <Simple_CALC+0x4ea>
	else if (__tmp > 65535)
    1eba:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <Simple_CALC+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9a a3       	std	Y+34, r25	; 0x22
    1ef8:	89 a3       	std	Y+33, r24	; 0x21
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <Simple_CALC+0x4cc>
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	98 a3       	std	Y+32, r25	; 0x20
    1f02:	8f 8f       	std	Y+31, r24	; 0x1f
    1f04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f06:	98 a1       	ldd	r25, Y+32	; 0x20
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <Simple_CALC+0x4ba>
    1f0c:	98 a3       	std	Y+32, r25	; 0x20
    1f0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	89 a1       	ldd	r24, Y+33	; 0x21
    1f12:	9a a1       	ldd	r25, Y+34	; 0x22
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9a a3       	std	Y+34, r25	; 0x22
    1f18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <Simple_CALC+0x4ae>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <Simple_CALC+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6b a1       	ldd	r22, Y+35	; 0x23
    1f26:	7c a1       	ldd	r23, Y+36	; 0x24
    1f28:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9a a3       	std	Y+34, r25	; 0x22
    1f36:	89 a3       	std	Y+33, r24	; 0x21
    1f38:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <Simple_CALC+0x4f6>
    1f48:	9e 8f       	std	Y+30, r25	; 0x1e
    1f4a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);

    switch(First_Operator)
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e8 5a       	subi	r30, 0xA8	; 168
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 81       	ld	r24, Z
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	6e 96       	adiw	r28, 0x1e	; 30
    1f5a:	3f af       	std	Y+63, r19	; 0x3f
    1f5c:	2e af       	std	Y+62, r18	; 0x3e
    1f5e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f60:	6e 96       	adiw	r28, 0x1e	; 30
    1f62:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f64:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f66:	6e 97       	sbiw	r28, 0x1e	; 30
    1f68:	4b 32       	cpi	r20, 0x2B	; 43
    1f6a:	51 05       	cpc	r21, r1
    1f6c:	f9 f0       	breq	.+62     	; 0x1fac <Simple_CALC+0x55e>
    1f6e:	6e 96       	adiw	r28, 0x1e	; 30
    1f70:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f72:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f74:	6e 97       	sbiw	r28, 0x1e	; 30
    1f76:	8c 32       	cpi	r24, 0x2C	; 44
    1f78:	91 05       	cpc	r25, r1
    1f7a:	44 f4       	brge	.+16     	; 0x1f8c <Simple_CALC+0x53e>
    1f7c:	6e 96       	adiw	r28, 0x1e	; 30
    1f7e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f80:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f82:	6e 97       	sbiw	r28, 0x1e	; 30
    1f84:	ea 32       	cpi	r30, 0x2A	; 42
    1f86:	f1 05       	cpc	r31, r1
    1f88:	a9 f1       	breq	.+106    	; 0x1ff4 <Simple_CALC+0x5a6>
    1f8a:	7e c0       	rjmp	.+252    	; 0x2088 <Simple_CALC+0x63a>
    1f8c:	6e 96       	adiw	r28, 0x1e	; 30
    1f8e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f90:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f92:	6e 97       	sbiw	r28, 0x1e	; 30
    1f94:	2d 32       	cpi	r18, 0x2D	; 45
    1f96:	31 05       	cpc	r19, r1
    1f98:	d1 f0       	breq	.+52     	; 0x1fce <Simple_CALC+0x580>
    1f9a:	6e 96       	adiw	r28, 0x1e	; 30
    1f9c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f9e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fa0:	6e 97       	sbiw	r28, 0x1e	; 30
    1fa2:	4f 32       	cpi	r20, 0x2F	; 47
    1fa4:	51 05       	cpc	r21, r1
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <Simple_CALC+0x55c>
    1fa8:	43 c0       	rjmp	.+134    	; 0x2030 <Simple_CALC+0x5e2>
    1faa:	6e c0       	rjmp	.+220    	; 0x2088 <Simple_CALC+0x63a>
    {

        case '+':{
        			Result=(First_Digit&0x0F)+(Second_Digit&0x0F);
    1fac:	fe 01       	movw	r30, r28
    1fae:	e6 5a       	subi	r30, 0xA6	; 166
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	98 2f       	mov	r25, r24
    1fb6:	9f 70       	andi	r25, 0x0F	; 15
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e7 5a       	subi	r30, 0xA7	; 167
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8f 70       	andi	r24, 0x0F	; 15
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	ea 5a       	subi	r30, 0xAA	; 170
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	89 0f       	add	r24, r25
    1fca:	80 83       	st	Z, r24
    1fcc:	d3 c0       	rjmp	.+422    	; 0x2174 <Simple_CALC+0x726>
                    //LCD_Send_Character(Result);
                    //_delay_ms(500);
                    break;
                 }
        case '-':{
        			Result=(First_Digit&0x0F)-(Second_Digit&0x0F);
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e6 5a       	subi	r30, 0xA6	; 166
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 81       	ld	r24, Z
    1fd6:	98 2f       	mov	r25, r24
    1fd8:	9f 70       	andi	r25, 0x0F	; 15
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e7 5a       	subi	r30, 0xA7	; 167
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8f 70       	andi	r24, 0x0F	; 15
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ea 5a       	subi	r30, 0xAA	; 170
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	59 2f       	mov	r21, r25
    1fec:	58 1b       	sub	r21, r24
    1fee:	85 2f       	mov	r24, r21
    1ff0:	80 83       	st	Z, r24
    1ff2:	c0 c0       	rjmp	.+384    	; 0x2174 <Simple_CALC+0x726>
                    //LCD_Send_Character(Result);
                    //_delay_ms(500);
                    break;
                 }
        case '*':{
        			Result=(First_Digit&0x0F)*(Second_Digit&0x0F);
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e6 5a       	subi	r30, 0xA6	; 166
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9c 01       	movw	r18, r24
    2002:	2f 70       	andi	r18, 0x0F	; 15
    2004:	30 70       	andi	r19, 0x00	; 0
    2006:	fe 01       	movw	r30, r28
    2008:	e7 5a       	subi	r30, 0xA7	; 167
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	8f 70       	andi	r24, 0x0F	; 15
    2014:	90 70       	andi	r25, 0x00	; 0
    2016:	fc 01       	movw	r30, r24
    2018:	2e 9f       	mul	r18, r30
    201a:	c0 01       	movw	r24, r0
    201c:	2f 9f       	mul	r18, r31
    201e:	90 0d       	add	r25, r0
    2020:	3e 9f       	mul	r19, r30
    2022:	90 0d       	add	r25, r0
    2024:	11 24       	eor	r1, r1
    2026:	fe 01       	movw	r30, r28
    2028:	ea 5a       	subi	r30, 0xAA	; 170
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 83       	st	Z, r24
    202e:	a2 c0       	rjmp	.+324    	; 0x2174 <Simple_CALC+0x726>
                    //LCD_Send_Character(Result);
                    //_delay_ms(500);
                    break;
                 }
        case '/':{
        			Result=(First_Digit&0x0F)/(Second_Digit&0x0F);
    2030:	fe 01       	movw	r30, r28
    2032:	e6 5a       	subi	r30, 0xA6	; 166
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	ac 01       	movw	r20, r24
    203e:	4f 70       	andi	r20, 0x0F	; 15
    2040:	50 70       	andi	r21, 0x00	; 0
    2042:	fe 01       	movw	r30, r28
    2044:	e7 5a       	subi	r30, 0xA7	; 167
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	80 81       	ld	r24, Z
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9c 01       	movw	r18, r24
    2050:	2f 70       	andi	r18, 0x0F	; 15
    2052:	30 70       	andi	r19, 0x00	; 0
    2054:	ca 01       	movw	r24, r20
    2056:	b9 01       	movw	r22, r18
    2058:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__divmodhi4>
    205c:	cb 01       	movw	r24, r22
    205e:	fe 01       	movw	r30, r28
    2060:	ea 5a       	subi	r30, 0xAA	; 170
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 83       	st	Z, r24
        			if((Second_Digit&0x0F)==0)
    2066:	fe 01       	movw	r30, r28
    2068:	e7 5a       	subi	r30, 0xA7	; 167
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	8f 70       	andi	r24, 0x0F	; 15
    2074:	90 70       	andi	r25, 0x00	; 0
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	09 f0       	breq	.+2      	; 0x207c <Simple_CALC+0x62e>
    207a:	7c c0       	rjmp	.+248    	; 0x2174 <Simple_CALC+0x726>
        			{
        				Calc_ERROR=1;
    207c:	fe 01       	movw	r30, r28
    207e:	eb 5a       	subi	r30, 0xAB	; 171
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 83       	st	Z, r24
    2086:	76 c0       	rjmp	.+236    	; 0x2174 <Simple_CALC+0x726>
                    //LCD_Send_Character(Result);
                    //_delay_ms(500);
                    break;
                 }
        default: {
        			LCD_Send_String((unsigned char*)"Error");
    2088:	8f e6       	ldi	r24, 0x6F	; 111
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCD_Send_String>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	aa ef       	ldi	r26, 0xFA	; 250
    2096:	b3 e4       	ldi	r27, 0x43	; 67
    2098:	89 8f       	std	Y+25, r24	; 0x19
    209a:	9a 8f       	std	Y+26, r25	; 0x1a
    209c:	ab 8f       	std	Y+27, r26	; 0x1b
    209e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	69 8d       	ldd	r22, Y+25	; 0x19
    20a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a ef       	ldi	r20, 0xFA	; 250
    20ae:	54 e4       	ldi	r21, 0x44	; 68
    20b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	8d 8b       	std	Y+21, r24	; 0x15
    20ba:	9e 8b       	std	Y+22, r25	; 0x16
    20bc:	af 8b       	std	Y+23, r26	; 0x17
    20be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c0:	6d 89       	ldd	r22, Y+21	; 0x15
    20c2:	7e 89       	ldd	r23, Y+22	; 0x16
    20c4:	8f 89       	ldd	r24, Y+23	; 0x17
    20c6:	98 8d       	ldd	r25, Y+24	; 0x18
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <Simple_CALC+0x694>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
    20de:	8b 8b       	std	Y+19, r24	; 0x13
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <Simple_CALC+0x712>
	else if (__tmp > 65535)
    20e2:	6d 89       	ldd	r22, Y+21	; 0x15
    20e4:	7e 89       	ldd	r23, Y+22	; 0x16
    20e6:	8f 89       	ldd	r24, Y+23	; 0x17
    20e8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <Simple_CALC+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	69 8d       	ldd	r22, Y+25	; 0x19
    20fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <Simple_CALC+0x6f4>
    2124:	88 ec       	ldi	r24, 0xC8	; 200
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9a 8b       	std	Y+18, r25	; 0x12
    212a:	89 8b       	std	Y+17, r24	; 0x11
    212c:	89 89       	ldd	r24, Y+17	; 0x11
    212e:	9a 89       	ldd	r25, Y+18	; 0x12
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <Simple_CALC+0x6e2>
    2134:	9a 8b       	std	Y+18, r25	; 0x12
    2136:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	8b 89       	ldd	r24, Y+19	; 0x13
    213a:	9c 89       	ldd	r25, Y+20	; 0x14
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	8b 89       	ldd	r24, Y+19	; 0x13
    2144:	9c 89       	ldd	r25, Y+20	; 0x14
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <Simple_CALC+0x6d6>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <Simple_CALC+0x726>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	6d 89       	ldd	r22, Y+21	; 0x15
    214e:	7e 89       	ldd	r23, Y+22	; 0x16
    2150:	8f 89       	ldd	r24, Y+23	; 0x17
    2152:	98 8d       	ldd	r25, Y+24	; 0x18
    2154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	98 8b       	std	Y+16, r25	; 0x10
    2166:	8f 87       	std	Y+15, r24	; 0x0f
    2168:	8f 85       	ldd	r24, Y+15	; 0x0f
    216a:	98 89       	ldd	r25, Y+16	; 0x10
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <Simple_CALC+0x71e>
    2170:	98 8b       	std	Y+16, r25	; 0x10
    2172:	8f 87       	std	Y+15, r24	; 0x0f
        		    _delay_ms(500);
        			break;
        		 }
    }
    if(Calc_ERROR==1)
    2174:	fe 01       	movw	r30, r28
    2176:	eb 5a       	subi	r30, 0xAB	; 171
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	80 81       	ld	r24, Z
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	29 f4       	brne	.+10     	; 0x218a <Simple_CALC+0x73c>
    {
    	LCD_Send_String((unsigned char*)"Error");
    2180:	8f e6       	ldi	r24, 0x6F	; 111
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCD_Send_String>
    2188:	79 c0       	rjmp	.+242    	; 0x227c <Simple_CALC+0x82e>
    }
    else
    {
    	 LCD_Send_Character(Result|0x30);
    218a:	fe 01       	movw	r30, r28
    218c:	ea 5a       	subi	r30, 0xAA	; 170
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	80 63       	ori	r24, 0x30	; 48
    2194:	0e 94 11 09 	call	0x1222	; 0x1222 <LCD_Send_Character>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	aa ef       	ldi	r26, 0xFA	; 250
    219e:	b3 e4       	ldi	r27, 0x43	; 67
    21a0:	8b 87       	std	Y+11, r24	; 0x0b
    21a2:	9c 87       	std	Y+12, r25	; 0x0c
    21a4:	ad 87       	std	Y+13, r26	; 0x0d
    21a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a ef       	ldi	r20, 0xFA	; 250
    21b6:	54 e4       	ldi	r21, 0x44	; 68
    21b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8f 83       	std	Y+7, r24	; 0x07
    21c2:	98 87       	std	Y+8, r25	; 0x08
    21c4:	a9 87       	std	Y+9, r26	; 0x09
    21c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ca:	78 85       	ldd	r23, Y+8	; 0x08
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21dc:	88 23       	and	r24, r24
    21de:	2c f4       	brge	.+10     	; 0x21ea <Simple_CALC+0x79c>
		__ticks = 1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
    21e8:	3f c0       	rjmp	.+126    	; 0x2268 <Simple_CALC+0x81a>
	else if (__tmp > 65535)
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	3f ef       	ldi	r19, 0xFF	; 255
    21f6:	4f e7       	ldi	r20, 0x7F	; 127
    21f8:	57 e4       	ldi	r21, 0x47	; 71
    21fa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21fe:	18 16       	cp	r1, r24
    2200:	4c f5       	brge	.+82     	; 0x2254 <Simple_CALC+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2202:	6b 85       	ldd	r22, Y+11	; 0x0b
    2204:	7c 85       	ldd	r23, Y+12	; 0x0c
    2206:	8d 85       	ldd	r24, Y+13	; 0x0d
    2208:	9e 85       	ldd	r25, Y+14	; 0x0e
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e2       	ldi	r20, 0x20	; 32
    2210:	51 e4       	ldi	r21, 0x41	; 65
    2212:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	0f c0       	rjmp	.+30     	; 0x224a <Simple_CALC+0x7fc>
    222c:	88 ec       	ldi	r24, 0xC8	; 200
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <Simple_CALC+0x7ea>
    223c:	9c 83       	std	Y+4, r25	; 0x04
    223e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	9e 83       	std	Y+6, r25	; 0x06
    2248:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	69 f7       	brne	.-38     	; 0x222c <Simple_CALC+0x7de>
    2252:	14 c0       	rjmp	.+40     	; 0x227c <Simple_CALC+0x82e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <Simple_CALC+0x826>
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01
    	 _delay_ms(500);
    }
    Key_Pressed=KeyPad_GetKey();
    227c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <KeyPad_GetKey>
    2280:	fe 01       	movw	r30, r28
    2282:	e5 5a       	subi	r30, 0xA5	; 165
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 83       	st	Z, r24
    KEYPAD_CLEAR();
    2288:	0e 94 9b 0c 	call	0x1936	; 0x1936 <KEYPAD_CLEAR>
}
    228c:	c3 5a       	subi	r28, 0xA3	; 163
    228e:	df 4f       	sbci	r29, 0xFF	; 255
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	08 95       	ret

000022a4 <main>:
#include "Calculator.h"

int main(void)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	2e 97       	sbiw	r28, 0x0e	; 14
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61

    //unsigned char Key_Pressed;
    LCD_init();
    22b8:	0e 94 f4 06 	call	0xde8	; 0xde8 <LCD_init>
    KeyPad_init();
    22bc:	0e 94 46 0a 	call	0x148c	; 0x148c <KeyPad_init>
    LCD_Send_String((unsigned char*)"*Welcome LAMYAA*");
    22c0:	85 e7       	ldi	r24, 0x75	; 117
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCD_Send_String>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	aa ef       	ldi	r26, 0xFA	; 250
    22ce:	b4 e4       	ldi	r27, 0x44	; 68
    22d0:	8b 87       	std	Y+11, r24	; 0x0b
    22d2:	9c 87       	std	Y+12, r25	; 0x0c
    22d4:	ad 87       	std	Y+13, r26	; 0x0d
    22d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a ef       	ldi	r20, 0xFA	; 250
    22e6:	54 e4       	ldi	r21, 0x44	; 68
    22e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8f 83       	std	Y+7, r24	; 0x07
    22f2:	98 87       	std	Y+8, r25	; 0x08
    22f4:	a9 87       	std	Y+9, r26	; 0x09
    22f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e8       	ldi	r20, 0x80	; 128
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    230c:	88 23       	and	r24, r24
    230e:	2c f4       	brge	.+10     	; 0x231a <main+0x76>
		__ticks = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	3f c0       	rjmp	.+126    	; 0x2398 <main+0xf4>
	else if (__tmp > 65535)
    231a:	6f 81       	ldd	r22, Y+7	; 0x07
    231c:	78 85       	ldd	r23, Y+8	; 0x08
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	4f e7       	ldi	r20, 0x7F	; 127
    2328:	57 e4       	ldi	r21, 0x47	; 71
    232a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    232e:	18 16       	cp	r1, r24
    2330:	4c f5       	brge	.+82     	; 0x2384 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2332:	6b 85       	ldd	r22, Y+11	; 0x0b
    2334:	7c 85       	ldd	r23, Y+12	; 0x0c
    2336:	8d 85       	ldd	r24, Y+13	; 0x0d
    2338:	9e 85       	ldd	r25, Y+14	; 0x0e
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	51 e4       	ldi	r21, 0x41	; 65
    2342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	0f c0       	rjmp	.+30     	; 0x237a <main+0xd6>
    235c:	88 ec       	ldi	r24, 0xC8	; 200
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	8b 83       	std	Y+3, r24	; 0x03
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <main+0xc4>
    236c:	9c 83       	std	Y+4, r25	; 0x04
    236e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2370:	8d 81       	ldd	r24, Y+5	; 0x05
    2372:	9e 81       	ldd	r25, Y+6	; 0x06
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	69 f7       	brne	.-38     	; 0x235c <main+0xb8>
    2382:	14 c0       	rjmp	.+40     	; 0x23ac <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	9a 81       	ldd	r25, Y+2	; 0x02
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <main+0x100>
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2000);
    LCD_CLear_Screen();
    23ac:	0e 94 11 08 	call	0x1022	; 0x1022 <LCD_CLear_Screen>
            default:
                        LCD_Send_Character(Key_Pressed);
                    	_delay_ms(500);
                        break;
        }*/
        Simple_CALC();
    23b0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Simple_CALC>
    23b4:	fd cf       	rjmp	.-6      	; 0x23b0 <main+0x10c>

000023b6 <__divmodhi4>:
    23b6:	97 fb       	bst	r25, 7
    23b8:	09 2e       	mov	r0, r25
    23ba:	07 26       	eor	r0, r23
    23bc:	0a d0       	rcall	.+20     	; 0x23d2 <__divmodhi4_neg1>
    23be:	77 fd       	sbrc	r23, 7
    23c0:	04 d0       	rcall	.+8      	; 0x23ca <__divmodhi4_neg2>
    23c2:	0c d0       	rcall	.+24     	; 0x23dc <__udivmodhi4>
    23c4:	06 d0       	rcall	.+12     	; 0x23d2 <__divmodhi4_neg1>
    23c6:	00 20       	and	r0, r0
    23c8:	1a f4       	brpl	.+6      	; 0x23d0 <__divmodhi4_exit>

000023ca <__divmodhi4_neg2>:
    23ca:	70 95       	com	r23
    23cc:	61 95       	neg	r22
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255

000023d0 <__divmodhi4_exit>:
    23d0:	08 95       	ret

000023d2 <__divmodhi4_neg1>:
    23d2:	f6 f7       	brtc	.-4      	; 0x23d0 <__divmodhi4_exit>
    23d4:	90 95       	com	r25
    23d6:	81 95       	neg	r24
    23d8:	9f 4f       	sbci	r25, 0xFF	; 255
    23da:	08 95       	ret

000023dc <__udivmodhi4>:
    23dc:	aa 1b       	sub	r26, r26
    23de:	bb 1b       	sub	r27, r27
    23e0:	51 e1       	ldi	r21, 0x11	; 17
    23e2:	07 c0       	rjmp	.+14     	; 0x23f2 <__udivmodhi4_ep>

000023e4 <__udivmodhi4_loop>:
    23e4:	aa 1f       	adc	r26, r26
    23e6:	bb 1f       	adc	r27, r27
    23e8:	a6 17       	cp	r26, r22
    23ea:	b7 07       	cpc	r27, r23
    23ec:	10 f0       	brcs	.+4      	; 0x23f2 <__udivmodhi4_ep>
    23ee:	a6 1b       	sub	r26, r22
    23f0:	b7 0b       	sbc	r27, r23

000023f2 <__udivmodhi4_ep>:
    23f2:	88 1f       	adc	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	5a 95       	dec	r21
    23f8:	a9 f7       	brne	.-22     	; 0x23e4 <__udivmodhi4_loop>
    23fa:	80 95       	com	r24
    23fc:	90 95       	com	r25
    23fe:	bc 01       	movw	r22, r24
    2400:	cd 01       	movw	r24, r26
    2402:	08 95       	ret

00002404 <__prologue_saves__>:
    2404:	2f 92       	push	r2
    2406:	3f 92       	push	r3
    2408:	4f 92       	push	r4
    240a:	5f 92       	push	r5
    240c:	6f 92       	push	r6
    240e:	7f 92       	push	r7
    2410:	8f 92       	push	r8
    2412:	9f 92       	push	r9
    2414:	af 92       	push	r10
    2416:	bf 92       	push	r11
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	ca 1b       	sub	r28, r26
    242e:	db 0b       	sbc	r29, r27
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	09 94       	ijmp

0000243c <__epilogue_restores__>:
    243c:	2a 88       	ldd	r2, Y+18	; 0x12
    243e:	39 88       	ldd	r3, Y+17	; 0x11
    2440:	48 88       	ldd	r4, Y+16	; 0x10
    2442:	5f 84       	ldd	r5, Y+15	; 0x0f
    2444:	6e 84       	ldd	r6, Y+14	; 0x0e
    2446:	7d 84       	ldd	r7, Y+13	; 0x0d
    2448:	8c 84       	ldd	r8, Y+12	; 0x0c
    244a:	9b 84       	ldd	r9, Y+11	; 0x0b
    244c:	aa 84       	ldd	r10, Y+10	; 0x0a
    244e:	b9 84       	ldd	r11, Y+9	; 0x09
    2450:	c8 84       	ldd	r12, Y+8	; 0x08
    2452:	df 80       	ldd	r13, Y+7	; 0x07
    2454:	ee 80       	ldd	r14, Y+6	; 0x06
    2456:	fd 80       	ldd	r15, Y+5	; 0x05
    2458:	0c 81       	ldd	r16, Y+4	; 0x04
    245a:	1b 81       	ldd	r17, Y+3	; 0x03
    245c:	aa 81       	ldd	r26, Y+2	; 0x02
    245e:	b9 81       	ldd	r27, Y+1	; 0x01
    2460:	ce 0f       	add	r28, r30
    2462:	d1 1d       	adc	r29, r1
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	ed 01       	movw	r28, r26
    2470:	08 95       	ret

00002472 <sprintf>:
    2472:	ae e0       	ldi	r26, 0x0E	; 14
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	ef e3       	ldi	r30, 0x3F	; 63
    2478:	f2 e1       	ldi	r31, 0x12	; 18
    247a:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__+0x1c>
    247e:	0d 89       	ldd	r16, Y+21	; 0x15
    2480:	1e 89       	ldd	r17, Y+22	; 0x16
    2482:	86 e0       	ldi	r24, 0x06	; 6
    2484:	8c 83       	std	Y+4, r24	; 0x04
    2486:	1a 83       	std	Y+2, r17	; 0x02
    2488:	09 83       	std	Y+1, r16	; 0x01
    248a:	8f ef       	ldi	r24, 0xFF	; 255
    248c:	9f e7       	ldi	r25, 0x7F	; 127
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	9e 01       	movw	r18, r28
    2494:	27 5e       	subi	r18, 0xE7	; 231
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	ce 01       	movw	r24, r28
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	6f 89       	ldd	r22, Y+23	; 0x17
    249e:	78 8d       	ldd	r23, Y+24	; 0x18
    24a0:	a9 01       	movw	r20, r18
    24a2:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vfprintf>
    24a6:	2f 81       	ldd	r18, Y+7	; 0x07
    24a8:	38 85       	ldd	r19, Y+8	; 0x08
    24aa:	02 0f       	add	r16, r18
    24ac:	13 1f       	adc	r17, r19
    24ae:	f8 01       	movw	r30, r16
    24b0:	10 82       	st	Z, r1
    24b2:	2e 96       	adiw	r28, 0x0e	; 14
    24b4:	e4 e0       	ldi	r30, 0x04	; 4
    24b6:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__+0x1c>

000024ba <vfprintf>:
    24ba:	ab e0       	ldi	r26, 0x0B	; 11
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e3 e6       	ldi	r30, 0x63	; 99
    24c0:	f2 e1       	ldi	r31, 0x12	; 18
    24c2:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__prologue_saves__>
    24c6:	3c 01       	movw	r6, r24
    24c8:	2b 01       	movw	r4, r22
    24ca:	5a 01       	movw	r10, r20
    24cc:	fc 01       	movw	r30, r24
    24ce:	17 82       	std	Z+7, r1	; 0x07
    24d0:	16 82       	std	Z+6, r1	; 0x06
    24d2:	83 81       	ldd	r24, Z+3	; 0x03
    24d4:	81 fd       	sbrc	r24, 1
    24d6:	03 c0       	rjmp	.+6      	; 0x24de <vfprintf+0x24>
    24d8:	6f ef       	ldi	r22, 0xFF	; 255
    24da:	7f ef       	ldi	r23, 0xFF	; 255
    24dc:	c6 c1       	rjmp	.+908    	; 0x286a <vfprintf+0x3b0>
    24de:	9a e0       	ldi	r25, 0x0A	; 10
    24e0:	89 2e       	mov	r8, r25
    24e2:	1e 01       	movw	r2, r28
    24e4:	08 94       	sec
    24e6:	21 1c       	adc	r2, r1
    24e8:	31 1c       	adc	r3, r1
    24ea:	f3 01       	movw	r30, r6
    24ec:	23 81       	ldd	r18, Z+3	; 0x03
    24ee:	f2 01       	movw	r30, r4
    24f0:	23 fd       	sbrc	r18, 3
    24f2:	85 91       	lpm	r24, Z+
    24f4:	23 ff       	sbrs	r18, 3
    24f6:	81 91       	ld	r24, Z+
    24f8:	2f 01       	movw	r4, r30
    24fa:	88 23       	and	r24, r24
    24fc:	09 f4       	brne	.+2      	; 0x2500 <vfprintf+0x46>
    24fe:	b2 c1       	rjmp	.+868    	; 0x2864 <vfprintf+0x3aa>
    2500:	85 32       	cpi	r24, 0x25	; 37
    2502:	39 f4       	brne	.+14     	; 0x2512 <vfprintf+0x58>
    2504:	23 fd       	sbrc	r18, 3
    2506:	85 91       	lpm	r24, Z+
    2508:	23 ff       	sbrs	r18, 3
    250a:	81 91       	ld	r24, Z+
    250c:	2f 01       	movw	r4, r30
    250e:	85 32       	cpi	r24, 0x25	; 37
    2510:	29 f4       	brne	.+10     	; 0x251c <vfprintf+0x62>
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	b3 01       	movw	r22, r6
    2516:	0e 94 50 14 	call	0x28a0	; 0x28a0 <fputc>
    251a:	e7 cf       	rjmp	.-50     	; 0x24ea <vfprintf+0x30>
    251c:	98 2f       	mov	r25, r24
    251e:	ff 24       	eor	r15, r15
    2520:	ee 24       	eor	r14, r14
    2522:	99 24       	eor	r9, r9
    2524:	ff e1       	ldi	r31, 0x1F	; 31
    2526:	ff 15       	cp	r31, r15
    2528:	d0 f0       	brcs	.+52     	; 0x255e <vfprintf+0xa4>
    252a:	9b 32       	cpi	r25, 0x2B	; 43
    252c:	69 f0       	breq	.+26     	; 0x2548 <vfprintf+0x8e>
    252e:	9c 32       	cpi	r25, 0x2C	; 44
    2530:	28 f4       	brcc	.+10     	; 0x253c <vfprintf+0x82>
    2532:	90 32       	cpi	r25, 0x20	; 32
    2534:	59 f0       	breq	.+22     	; 0x254c <vfprintf+0x92>
    2536:	93 32       	cpi	r25, 0x23	; 35
    2538:	91 f4       	brne	.+36     	; 0x255e <vfprintf+0xa4>
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <vfprintf+0x9e>
    253c:	9d 32       	cpi	r25, 0x2D	; 45
    253e:	49 f0       	breq	.+18     	; 0x2552 <vfprintf+0x98>
    2540:	90 33       	cpi	r25, 0x30	; 48
    2542:	69 f4       	brne	.+26     	; 0x255e <vfprintf+0xa4>
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	24 c0       	rjmp	.+72     	; 0x2590 <vfprintf+0xd6>
    2548:	52 e0       	ldi	r21, 0x02	; 2
    254a:	f5 2a       	or	r15, r21
    254c:	84 e0       	ldi	r24, 0x04	; 4
    254e:	f8 2a       	or	r15, r24
    2550:	28 c0       	rjmp	.+80     	; 0x25a2 <vfprintf+0xe8>
    2552:	98 e0       	ldi	r25, 0x08	; 8
    2554:	f9 2a       	or	r15, r25
    2556:	25 c0       	rjmp	.+74     	; 0x25a2 <vfprintf+0xe8>
    2558:	e0 e1       	ldi	r30, 0x10	; 16
    255a:	fe 2a       	or	r15, r30
    255c:	22 c0       	rjmp	.+68     	; 0x25a2 <vfprintf+0xe8>
    255e:	f7 fc       	sbrc	r15, 7
    2560:	29 c0       	rjmp	.+82     	; 0x25b4 <vfprintf+0xfa>
    2562:	89 2f       	mov	r24, r25
    2564:	80 53       	subi	r24, 0x30	; 48
    2566:	8a 30       	cpi	r24, 0x0A	; 10
    2568:	70 f4       	brcc	.+28     	; 0x2586 <vfprintf+0xcc>
    256a:	f6 fe       	sbrs	r15, 6
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <vfprintf+0xbe>
    256e:	98 9c       	mul	r9, r8
    2570:	90 2c       	mov	r9, r0
    2572:	11 24       	eor	r1, r1
    2574:	98 0e       	add	r9, r24
    2576:	15 c0       	rjmp	.+42     	; 0x25a2 <vfprintf+0xe8>
    2578:	e8 9c       	mul	r14, r8
    257a:	e0 2c       	mov	r14, r0
    257c:	11 24       	eor	r1, r1
    257e:	e8 0e       	add	r14, r24
    2580:	f0 e2       	ldi	r31, 0x20	; 32
    2582:	ff 2a       	or	r15, r31
    2584:	0e c0       	rjmp	.+28     	; 0x25a2 <vfprintf+0xe8>
    2586:	9e 32       	cpi	r25, 0x2E	; 46
    2588:	29 f4       	brne	.+10     	; 0x2594 <vfprintf+0xda>
    258a:	f6 fc       	sbrc	r15, 6
    258c:	6b c1       	rjmp	.+726    	; 0x2864 <vfprintf+0x3aa>
    258e:	40 e4       	ldi	r20, 0x40	; 64
    2590:	f4 2a       	or	r15, r20
    2592:	07 c0       	rjmp	.+14     	; 0x25a2 <vfprintf+0xe8>
    2594:	9c 36       	cpi	r25, 0x6C	; 108
    2596:	19 f4       	brne	.+6      	; 0x259e <vfprintf+0xe4>
    2598:	50 e8       	ldi	r21, 0x80	; 128
    259a:	f5 2a       	or	r15, r21
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <vfprintf+0xe8>
    259e:	98 36       	cpi	r25, 0x68	; 104
    25a0:	49 f4       	brne	.+18     	; 0x25b4 <vfprintf+0xfa>
    25a2:	f2 01       	movw	r30, r4
    25a4:	23 fd       	sbrc	r18, 3
    25a6:	95 91       	lpm	r25, Z+
    25a8:	23 ff       	sbrs	r18, 3
    25aa:	91 91       	ld	r25, Z+
    25ac:	2f 01       	movw	r4, r30
    25ae:	99 23       	and	r25, r25
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <vfprintf+0xfa>
    25b2:	b8 cf       	rjmp	.-144    	; 0x2524 <vfprintf+0x6a>
    25b4:	89 2f       	mov	r24, r25
    25b6:	85 54       	subi	r24, 0x45	; 69
    25b8:	83 30       	cpi	r24, 0x03	; 3
    25ba:	18 f0       	brcs	.+6      	; 0x25c2 <vfprintf+0x108>
    25bc:	80 52       	subi	r24, 0x20	; 32
    25be:	83 30       	cpi	r24, 0x03	; 3
    25c0:	38 f4       	brcc	.+14     	; 0x25d0 <vfprintf+0x116>
    25c2:	44 e0       	ldi	r20, 0x04	; 4
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	a4 0e       	add	r10, r20
    25c8:	b5 1e       	adc	r11, r21
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	59 83       	std	Y+1, r21	; 0x01
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <vfprintf+0x134>
    25d0:	93 36       	cpi	r25, 0x63	; 99
    25d2:	31 f0       	breq	.+12     	; 0x25e0 <vfprintf+0x126>
    25d4:	93 37       	cpi	r25, 0x73	; 115
    25d6:	79 f0       	breq	.+30     	; 0x25f6 <vfprintf+0x13c>
    25d8:	93 35       	cpi	r25, 0x53	; 83
    25da:	09 f0       	breq	.+2      	; 0x25de <vfprintf+0x124>
    25dc:	56 c0       	rjmp	.+172    	; 0x268a <vfprintf+0x1d0>
    25de:	20 c0       	rjmp	.+64     	; 0x2620 <vfprintf+0x166>
    25e0:	f5 01       	movw	r30, r10
    25e2:	80 81       	ld	r24, Z
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	42 e0       	ldi	r20, 0x02	; 2
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	a4 0e       	add	r10, r20
    25ec:	b5 1e       	adc	r11, r21
    25ee:	61 01       	movw	r12, r2
    25f0:	01 e0       	ldi	r16, 0x01	; 1
    25f2:	10 e0       	ldi	r17, 0x00	; 0
    25f4:	12 c0       	rjmp	.+36     	; 0x261a <vfprintf+0x160>
    25f6:	f5 01       	movw	r30, r10
    25f8:	c0 80       	ld	r12, Z
    25fa:	d1 80       	ldd	r13, Z+1	; 0x01
    25fc:	f6 fc       	sbrc	r15, 6
    25fe:	03 c0       	rjmp	.+6      	; 0x2606 <vfprintf+0x14c>
    2600:	6f ef       	ldi	r22, 0xFF	; 255
    2602:	7f ef       	ldi	r23, 0xFF	; 255
    2604:	02 c0       	rjmp	.+4      	; 0x260a <vfprintf+0x150>
    2606:	69 2d       	mov	r22, r9
    2608:	70 e0       	ldi	r23, 0x00	; 0
    260a:	42 e0       	ldi	r20, 0x02	; 2
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	a4 0e       	add	r10, r20
    2610:	b5 1e       	adc	r11, r21
    2612:	c6 01       	movw	r24, r12
    2614:	0e 94 45 14 	call	0x288a	; 0x288a <strnlen>
    2618:	8c 01       	movw	r16, r24
    261a:	5f e7       	ldi	r21, 0x7F	; 127
    261c:	f5 22       	and	r15, r21
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <vfprintf+0x18e>
    2620:	f5 01       	movw	r30, r10
    2622:	c0 80       	ld	r12, Z
    2624:	d1 80       	ldd	r13, Z+1	; 0x01
    2626:	f6 fc       	sbrc	r15, 6
    2628:	03 c0       	rjmp	.+6      	; 0x2630 <vfprintf+0x176>
    262a:	6f ef       	ldi	r22, 0xFF	; 255
    262c:	7f ef       	ldi	r23, 0xFF	; 255
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <vfprintf+0x17a>
    2630:	69 2d       	mov	r22, r9
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	42 e0       	ldi	r20, 0x02	; 2
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	a4 0e       	add	r10, r20
    263a:	b5 1e       	adc	r11, r21
    263c:	c6 01       	movw	r24, r12
    263e:	0e 94 3a 14 	call	0x2874	; 0x2874 <strnlen_P>
    2642:	8c 01       	movw	r16, r24
    2644:	50 e8       	ldi	r21, 0x80	; 128
    2646:	f5 2a       	or	r15, r21
    2648:	f3 fe       	sbrs	r15, 3
    264a:	07 c0       	rjmp	.+14     	; 0x265a <vfprintf+0x1a0>
    264c:	1a c0       	rjmp	.+52     	; 0x2682 <vfprintf+0x1c8>
    264e:	80 e2       	ldi	r24, 0x20	; 32
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	b3 01       	movw	r22, r6
    2654:	0e 94 50 14 	call	0x28a0	; 0x28a0 <fputc>
    2658:	ea 94       	dec	r14
    265a:	8e 2d       	mov	r24, r14
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	08 17       	cp	r16, r24
    2660:	19 07       	cpc	r17, r25
    2662:	a8 f3       	brcs	.-22     	; 0x264e <vfprintf+0x194>
    2664:	0e c0       	rjmp	.+28     	; 0x2682 <vfprintf+0x1c8>
    2666:	f6 01       	movw	r30, r12
    2668:	f7 fc       	sbrc	r15, 7
    266a:	85 91       	lpm	r24, Z+
    266c:	f7 fe       	sbrs	r15, 7
    266e:	81 91       	ld	r24, Z+
    2670:	6f 01       	movw	r12, r30
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	b3 01       	movw	r22, r6
    2676:	0e 94 50 14 	call	0x28a0	; 0x28a0 <fputc>
    267a:	e1 10       	cpse	r14, r1
    267c:	ea 94       	dec	r14
    267e:	01 50       	subi	r16, 0x01	; 1
    2680:	10 40       	sbci	r17, 0x00	; 0
    2682:	01 15       	cp	r16, r1
    2684:	11 05       	cpc	r17, r1
    2686:	79 f7       	brne	.-34     	; 0x2666 <vfprintf+0x1ac>
    2688:	ea c0       	rjmp	.+468    	; 0x285e <vfprintf+0x3a4>
    268a:	94 36       	cpi	r25, 0x64	; 100
    268c:	11 f0       	breq	.+4      	; 0x2692 <vfprintf+0x1d8>
    268e:	99 36       	cpi	r25, 0x69	; 105
    2690:	69 f5       	brne	.+90     	; 0x26ec <vfprintf+0x232>
    2692:	f7 fe       	sbrs	r15, 7
    2694:	08 c0       	rjmp	.+16     	; 0x26a6 <vfprintf+0x1ec>
    2696:	f5 01       	movw	r30, r10
    2698:	20 81       	ld	r18, Z
    269a:	31 81       	ldd	r19, Z+1	; 0x01
    269c:	42 81       	ldd	r20, Z+2	; 0x02
    269e:	53 81       	ldd	r21, Z+3	; 0x03
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0a c0       	rjmp	.+20     	; 0x26ba <vfprintf+0x200>
    26a6:	f5 01       	movw	r30, r10
    26a8:	80 81       	ld	r24, Z
    26aa:	91 81       	ldd	r25, Z+1	; 0x01
    26ac:	9c 01       	movw	r18, r24
    26ae:	44 27       	eor	r20, r20
    26b0:	37 fd       	sbrc	r19, 7
    26b2:	40 95       	com	r20
    26b4:	54 2f       	mov	r21, r20
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	a8 0e       	add	r10, r24
    26bc:	b9 1e       	adc	r11, r25
    26be:	9f e6       	ldi	r25, 0x6F	; 111
    26c0:	f9 22       	and	r15, r25
    26c2:	57 ff       	sbrs	r21, 7
    26c4:	09 c0       	rjmp	.+18     	; 0x26d8 <vfprintf+0x21e>
    26c6:	50 95       	com	r21
    26c8:	40 95       	com	r20
    26ca:	30 95       	com	r19
    26cc:	21 95       	neg	r18
    26ce:	3f 4f       	sbci	r19, 0xFF	; 255
    26d0:	4f 4f       	sbci	r20, 0xFF	; 255
    26d2:	5f 4f       	sbci	r21, 0xFF	; 255
    26d4:	e0 e8       	ldi	r30, 0x80	; 128
    26d6:	fe 2a       	or	r15, r30
    26d8:	ca 01       	movw	r24, r20
    26da:	b9 01       	movw	r22, r18
    26dc:	a1 01       	movw	r20, r2
    26de:	2a e0       	ldi	r18, 0x0A	; 10
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__ultoa_invert>
    26e6:	d8 2e       	mov	r13, r24
    26e8:	d2 18       	sub	r13, r2
    26ea:	40 c0       	rjmp	.+128    	; 0x276c <vfprintf+0x2b2>
    26ec:	95 37       	cpi	r25, 0x75	; 117
    26ee:	29 f4       	brne	.+10     	; 0x26fa <vfprintf+0x240>
    26f0:	1f 2d       	mov	r17, r15
    26f2:	1f 7e       	andi	r17, 0xEF	; 239
    26f4:	2a e0       	ldi	r18, 0x0A	; 10
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	1d c0       	rjmp	.+58     	; 0x2734 <vfprintf+0x27a>
    26fa:	1f 2d       	mov	r17, r15
    26fc:	19 7f       	andi	r17, 0xF9	; 249
    26fe:	9f 36       	cpi	r25, 0x6F	; 111
    2700:	61 f0       	breq	.+24     	; 0x271a <vfprintf+0x260>
    2702:	90 37       	cpi	r25, 0x70	; 112
    2704:	20 f4       	brcc	.+8      	; 0x270e <vfprintf+0x254>
    2706:	98 35       	cpi	r25, 0x58	; 88
    2708:	09 f0       	breq	.+2      	; 0x270c <vfprintf+0x252>
    270a:	ac c0       	rjmp	.+344    	; 0x2864 <vfprintf+0x3aa>
    270c:	0f c0       	rjmp	.+30     	; 0x272c <vfprintf+0x272>
    270e:	90 37       	cpi	r25, 0x70	; 112
    2710:	39 f0       	breq	.+14     	; 0x2720 <vfprintf+0x266>
    2712:	98 37       	cpi	r25, 0x78	; 120
    2714:	09 f0       	breq	.+2      	; 0x2718 <vfprintf+0x25e>
    2716:	a6 c0       	rjmp	.+332    	; 0x2864 <vfprintf+0x3aa>
    2718:	04 c0       	rjmp	.+8      	; 0x2722 <vfprintf+0x268>
    271a:	28 e0       	ldi	r18, 0x08	; 8
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	0a c0       	rjmp	.+20     	; 0x2734 <vfprintf+0x27a>
    2720:	10 61       	ori	r17, 0x10	; 16
    2722:	14 fd       	sbrc	r17, 4
    2724:	14 60       	ori	r17, 0x04	; 4
    2726:	20 e1       	ldi	r18, 0x10	; 16
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	04 c0       	rjmp	.+8      	; 0x2734 <vfprintf+0x27a>
    272c:	14 fd       	sbrc	r17, 4
    272e:	16 60       	ori	r17, 0x06	; 6
    2730:	20 e1       	ldi	r18, 0x10	; 16
    2732:	32 e0       	ldi	r19, 0x02	; 2
    2734:	17 ff       	sbrs	r17, 7
    2736:	08 c0       	rjmp	.+16     	; 0x2748 <vfprintf+0x28e>
    2738:	f5 01       	movw	r30, r10
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	44 e0       	ldi	r20, 0x04	; 4
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	08 c0       	rjmp	.+16     	; 0x2758 <vfprintf+0x29e>
    2748:	f5 01       	movw	r30, r10
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	bc 01       	movw	r22, r24
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	42 e0       	ldi	r20, 0x02	; 2
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	a4 0e       	add	r10, r20
    275a:	b5 1e       	adc	r11, r21
    275c:	a1 01       	movw	r20, r2
    275e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__ultoa_invert>
    2762:	d8 2e       	mov	r13, r24
    2764:	d2 18       	sub	r13, r2
    2766:	8f e7       	ldi	r24, 0x7F	; 127
    2768:	f8 2e       	mov	r15, r24
    276a:	f1 22       	and	r15, r17
    276c:	f6 fe       	sbrs	r15, 6
    276e:	0b c0       	rjmp	.+22     	; 0x2786 <vfprintf+0x2cc>
    2770:	5e ef       	ldi	r21, 0xFE	; 254
    2772:	f5 22       	and	r15, r21
    2774:	d9 14       	cp	r13, r9
    2776:	38 f4       	brcc	.+14     	; 0x2786 <vfprintf+0x2cc>
    2778:	f4 fe       	sbrs	r15, 4
    277a:	07 c0       	rjmp	.+14     	; 0x278a <vfprintf+0x2d0>
    277c:	f2 fc       	sbrc	r15, 2
    277e:	05 c0       	rjmp	.+10     	; 0x278a <vfprintf+0x2d0>
    2780:	8f ee       	ldi	r24, 0xEF	; 239
    2782:	f8 22       	and	r15, r24
    2784:	02 c0       	rjmp	.+4      	; 0x278a <vfprintf+0x2d0>
    2786:	1d 2d       	mov	r17, r13
    2788:	01 c0       	rjmp	.+2      	; 0x278c <vfprintf+0x2d2>
    278a:	19 2d       	mov	r17, r9
    278c:	f4 fe       	sbrs	r15, 4
    278e:	0d c0       	rjmp	.+26     	; 0x27aa <vfprintf+0x2f0>
    2790:	fe 01       	movw	r30, r28
    2792:	ed 0d       	add	r30, r13
    2794:	f1 1d       	adc	r31, r1
    2796:	80 81       	ld	r24, Z
    2798:	80 33       	cpi	r24, 0x30	; 48
    279a:	19 f4       	brne	.+6      	; 0x27a2 <vfprintf+0x2e8>
    279c:	99 ee       	ldi	r25, 0xE9	; 233
    279e:	f9 22       	and	r15, r25
    27a0:	08 c0       	rjmp	.+16     	; 0x27b2 <vfprintf+0x2f8>
    27a2:	1f 5f       	subi	r17, 0xFF	; 255
    27a4:	f2 fe       	sbrs	r15, 2
    27a6:	05 c0       	rjmp	.+10     	; 0x27b2 <vfprintf+0x2f8>
    27a8:	03 c0       	rjmp	.+6      	; 0x27b0 <vfprintf+0x2f6>
    27aa:	8f 2d       	mov	r24, r15
    27ac:	86 78       	andi	r24, 0x86	; 134
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <vfprintf+0x2f8>
    27b0:	1f 5f       	subi	r17, 0xFF	; 255
    27b2:	0f 2d       	mov	r16, r15
    27b4:	f3 fc       	sbrc	r15, 3
    27b6:	14 c0       	rjmp	.+40     	; 0x27e0 <vfprintf+0x326>
    27b8:	f0 fe       	sbrs	r15, 0
    27ba:	0f c0       	rjmp	.+30     	; 0x27da <vfprintf+0x320>
    27bc:	1e 15       	cp	r17, r14
    27be:	10 f0       	brcs	.+4      	; 0x27c4 <vfprintf+0x30a>
    27c0:	9d 2c       	mov	r9, r13
    27c2:	0b c0       	rjmp	.+22     	; 0x27da <vfprintf+0x320>
    27c4:	9d 2c       	mov	r9, r13
    27c6:	9e 0c       	add	r9, r14
    27c8:	91 1a       	sub	r9, r17
    27ca:	1e 2d       	mov	r17, r14
    27cc:	06 c0       	rjmp	.+12     	; 0x27da <vfprintf+0x320>
    27ce:	80 e2       	ldi	r24, 0x20	; 32
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	b3 01       	movw	r22, r6
    27d4:	0e 94 50 14 	call	0x28a0	; 0x28a0 <fputc>
    27d8:	1f 5f       	subi	r17, 0xFF	; 255
    27da:	1e 15       	cp	r17, r14
    27dc:	c0 f3       	brcs	.-16     	; 0x27ce <vfprintf+0x314>
    27de:	04 c0       	rjmp	.+8      	; 0x27e8 <vfprintf+0x32e>
    27e0:	1e 15       	cp	r17, r14
    27e2:	10 f4       	brcc	.+4      	; 0x27e8 <vfprintf+0x32e>
    27e4:	e1 1a       	sub	r14, r17
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <vfprintf+0x330>
    27e8:	ee 24       	eor	r14, r14
    27ea:	04 ff       	sbrs	r16, 4
    27ec:	0f c0       	rjmp	.+30     	; 0x280c <vfprintf+0x352>
    27ee:	80 e3       	ldi	r24, 0x30	; 48
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	b3 01       	movw	r22, r6
    27f4:	0e 94 50 14 	call	0x28a0	; 0x28a0 <fputc>
    27f8:	02 ff       	sbrs	r16, 2
    27fa:	1d c0       	rjmp	.+58     	; 0x2836 <vfprintf+0x37c>
    27fc:	01 fd       	sbrc	r16, 1
    27fe:	03 c0       	rjmp	.+6      	; 0x2806 <vfprintf+0x34c>
    2800:	88 e7       	ldi	r24, 0x78	; 120
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e c0       	rjmp	.+28     	; 0x2822 <vfprintf+0x368>
    2806:	88 e5       	ldi	r24, 0x58	; 88
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0b c0       	rjmp	.+22     	; 0x2822 <vfprintf+0x368>
    280c:	80 2f       	mov	r24, r16
    280e:	86 78       	andi	r24, 0x86	; 134
    2810:	91 f0       	breq	.+36     	; 0x2836 <vfprintf+0x37c>
    2812:	01 ff       	sbrs	r16, 1
    2814:	02 c0       	rjmp	.+4      	; 0x281a <vfprintf+0x360>
    2816:	8b e2       	ldi	r24, 0x2B	; 43
    2818:	01 c0       	rjmp	.+2      	; 0x281c <vfprintf+0x362>
    281a:	80 e2       	ldi	r24, 0x20	; 32
    281c:	f7 fc       	sbrc	r15, 7
    281e:	8d e2       	ldi	r24, 0x2D	; 45
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	b3 01       	movw	r22, r6
    2824:	0e 94 50 14 	call	0x28a0	; 0x28a0 <fputc>
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <vfprintf+0x37c>
    282a:	80 e3       	ldi	r24, 0x30	; 48
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	b3 01       	movw	r22, r6
    2830:	0e 94 50 14 	call	0x28a0	; 0x28a0 <fputc>
    2834:	9a 94       	dec	r9
    2836:	d9 14       	cp	r13, r9
    2838:	c0 f3       	brcs	.-16     	; 0x282a <vfprintf+0x370>
    283a:	da 94       	dec	r13
    283c:	f1 01       	movw	r30, r2
    283e:	ed 0d       	add	r30, r13
    2840:	f1 1d       	adc	r31, r1
    2842:	80 81       	ld	r24, Z
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	b3 01       	movw	r22, r6
    2848:	0e 94 50 14 	call	0x28a0	; 0x28a0 <fputc>
    284c:	dd 20       	and	r13, r13
    284e:	a9 f7       	brne	.-22     	; 0x283a <vfprintf+0x380>
    2850:	06 c0       	rjmp	.+12     	; 0x285e <vfprintf+0x3a4>
    2852:	80 e2       	ldi	r24, 0x20	; 32
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	b3 01       	movw	r22, r6
    2858:	0e 94 50 14 	call	0x28a0	; 0x28a0 <fputc>
    285c:	ea 94       	dec	r14
    285e:	ee 20       	and	r14, r14
    2860:	c1 f7       	brne	.-16     	; 0x2852 <vfprintf+0x398>
    2862:	43 ce       	rjmp	.-890    	; 0x24ea <vfprintf+0x30>
    2864:	f3 01       	movw	r30, r6
    2866:	66 81       	ldd	r22, Z+6	; 0x06
    2868:	77 81       	ldd	r23, Z+7	; 0x07
    286a:	cb 01       	movw	r24, r22
    286c:	2b 96       	adiw	r28, 0x0b	; 11
    286e:	e2 e1       	ldi	r30, 0x12	; 18
    2870:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__epilogue_restores__>

00002874 <strnlen_P>:
    2874:	fc 01       	movw	r30, r24
    2876:	05 90       	lpm	r0, Z+
    2878:	61 50       	subi	r22, 0x01	; 1
    287a:	70 40       	sbci	r23, 0x00	; 0
    287c:	01 10       	cpse	r0, r1
    287e:	d8 f7       	brcc	.-10     	; 0x2876 <strnlen_P+0x2>
    2880:	80 95       	com	r24
    2882:	90 95       	com	r25
    2884:	8e 0f       	add	r24, r30
    2886:	9f 1f       	adc	r25, r31
    2888:	08 95       	ret

0000288a <strnlen>:
    288a:	fc 01       	movw	r30, r24
    288c:	61 50       	subi	r22, 0x01	; 1
    288e:	70 40       	sbci	r23, 0x00	; 0
    2890:	01 90       	ld	r0, Z+
    2892:	01 10       	cpse	r0, r1
    2894:	d8 f7       	brcc	.-10     	; 0x288c <strnlen+0x2>
    2896:	80 95       	com	r24
    2898:	90 95       	com	r25
    289a:	8e 0f       	add	r24, r30
    289c:	9f 1f       	adc	r25, r31
    289e:	08 95       	ret

000028a0 <fputc>:
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	8c 01       	movw	r16, r24
    28aa:	eb 01       	movw	r28, r22
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	81 ff       	sbrs	r24, 1
    28b0:	1b c0       	rjmp	.+54     	; 0x28e8 <fputc+0x48>
    28b2:	82 ff       	sbrs	r24, 2
    28b4:	0d c0       	rjmp	.+26     	; 0x28d0 <fputc+0x30>
    28b6:	2e 81       	ldd	r18, Y+6	; 0x06
    28b8:	3f 81       	ldd	r19, Y+7	; 0x07
    28ba:	8c 81       	ldd	r24, Y+4	; 0x04
    28bc:	9d 81       	ldd	r25, Y+5	; 0x05
    28be:	28 17       	cp	r18, r24
    28c0:	39 07       	cpc	r19, r25
    28c2:	64 f4       	brge	.+24     	; 0x28dc <fputc+0x3c>
    28c4:	e8 81       	ld	r30, Y
    28c6:	f9 81       	ldd	r31, Y+1	; 0x01
    28c8:	01 93       	st	Z+, r16
    28ca:	f9 83       	std	Y+1, r31	; 0x01
    28cc:	e8 83       	st	Y, r30
    28ce:	06 c0       	rjmp	.+12     	; 0x28dc <fputc+0x3c>
    28d0:	e8 85       	ldd	r30, Y+8	; 0x08
    28d2:	f9 85       	ldd	r31, Y+9	; 0x09
    28d4:	80 2f       	mov	r24, r16
    28d6:	09 95       	icall
    28d8:	89 2b       	or	r24, r25
    28da:	31 f4       	brne	.+12     	; 0x28e8 <fputc+0x48>
    28dc:	8e 81       	ldd	r24, Y+6	; 0x06
    28de:	9f 81       	ldd	r25, Y+7	; 0x07
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	9f 83       	std	Y+7, r25	; 0x07
    28e4:	8e 83       	std	Y+6, r24	; 0x06
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <fputc+0x4c>
    28e8:	0f ef       	ldi	r16, 0xFF	; 255
    28ea:	1f ef       	ldi	r17, 0xFF	; 255
    28ec:	c8 01       	movw	r24, r16
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	08 95       	ret

000028f8 <__ultoa_invert>:
    28f8:	fa 01       	movw	r30, r20
    28fa:	aa 27       	eor	r26, r26
    28fc:	28 30       	cpi	r18, 0x08	; 8
    28fe:	51 f1       	breq	.+84     	; 0x2954 <__ultoa_invert+0x5c>
    2900:	20 31       	cpi	r18, 0x10	; 16
    2902:	81 f1       	breq	.+96     	; 0x2964 <__ultoa_invert+0x6c>
    2904:	e8 94       	clt
    2906:	6f 93       	push	r22
    2908:	6e 7f       	andi	r22, 0xFE	; 254
    290a:	6e 5f       	subi	r22, 0xFE	; 254
    290c:	7f 4f       	sbci	r23, 0xFF	; 255
    290e:	8f 4f       	sbci	r24, 0xFF	; 255
    2910:	9f 4f       	sbci	r25, 0xFF	; 255
    2912:	af 4f       	sbci	r26, 0xFF	; 255
    2914:	b1 e0       	ldi	r27, 0x01	; 1
    2916:	3e d0       	rcall	.+124    	; 0x2994 <__ultoa_invert+0x9c>
    2918:	b4 e0       	ldi	r27, 0x04	; 4
    291a:	3c d0       	rcall	.+120    	; 0x2994 <__ultoa_invert+0x9c>
    291c:	67 0f       	add	r22, r23
    291e:	78 1f       	adc	r23, r24
    2920:	89 1f       	adc	r24, r25
    2922:	9a 1f       	adc	r25, r26
    2924:	a1 1d       	adc	r26, r1
    2926:	68 0f       	add	r22, r24
    2928:	79 1f       	adc	r23, r25
    292a:	8a 1f       	adc	r24, r26
    292c:	91 1d       	adc	r25, r1
    292e:	a1 1d       	adc	r26, r1
    2930:	6a 0f       	add	r22, r26
    2932:	71 1d       	adc	r23, r1
    2934:	81 1d       	adc	r24, r1
    2936:	91 1d       	adc	r25, r1
    2938:	a1 1d       	adc	r26, r1
    293a:	20 d0       	rcall	.+64     	; 0x297c <__ultoa_invert+0x84>
    293c:	09 f4       	brne	.+2      	; 0x2940 <__ultoa_invert+0x48>
    293e:	68 94       	set
    2940:	3f 91       	pop	r19
    2942:	2a e0       	ldi	r18, 0x0A	; 10
    2944:	26 9f       	mul	r18, r22
    2946:	11 24       	eor	r1, r1
    2948:	30 19       	sub	r19, r0
    294a:	30 5d       	subi	r19, 0xD0	; 208
    294c:	31 93       	st	Z+, r19
    294e:	de f6       	brtc	.-74     	; 0x2906 <__ultoa_invert+0xe>
    2950:	cf 01       	movw	r24, r30
    2952:	08 95       	ret
    2954:	46 2f       	mov	r20, r22
    2956:	47 70       	andi	r20, 0x07	; 7
    2958:	40 5d       	subi	r20, 0xD0	; 208
    295a:	41 93       	st	Z+, r20
    295c:	b3 e0       	ldi	r27, 0x03	; 3
    295e:	0f d0       	rcall	.+30     	; 0x297e <__ultoa_invert+0x86>
    2960:	c9 f7       	brne	.-14     	; 0x2954 <__ultoa_invert+0x5c>
    2962:	f6 cf       	rjmp	.-20     	; 0x2950 <__ultoa_invert+0x58>
    2964:	46 2f       	mov	r20, r22
    2966:	4f 70       	andi	r20, 0x0F	; 15
    2968:	40 5d       	subi	r20, 0xD0	; 208
    296a:	4a 33       	cpi	r20, 0x3A	; 58
    296c:	18 f0       	brcs	.+6      	; 0x2974 <__ultoa_invert+0x7c>
    296e:	49 5d       	subi	r20, 0xD9	; 217
    2970:	31 fd       	sbrc	r19, 1
    2972:	40 52       	subi	r20, 0x20	; 32
    2974:	41 93       	st	Z+, r20
    2976:	02 d0       	rcall	.+4      	; 0x297c <__ultoa_invert+0x84>
    2978:	a9 f7       	brne	.-22     	; 0x2964 <__ultoa_invert+0x6c>
    297a:	ea cf       	rjmp	.-44     	; 0x2950 <__ultoa_invert+0x58>
    297c:	b4 e0       	ldi	r27, 0x04	; 4
    297e:	a6 95       	lsr	r26
    2980:	97 95       	ror	r25
    2982:	87 95       	ror	r24
    2984:	77 95       	ror	r23
    2986:	67 95       	ror	r22
    2988:	ba 95       	dec	r27
    298a:	c9 f7       	brne	.-14     	; 0x297e <__ultoa_invert+0x86>
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	61 05       	cpc	r22, r1
    2990:	71 05       	cpc	r23, r1
    2992:	08 95       	ret
    2994:	9b 01       	movw	r18, r22
    2996:	ac 01       	movw	r20, r24
    2998:	0a 2e       	mov	r0, r26
    299a:	06 94       	lsr	r0
    299c:	57 95       	ror	r21
    299e:	47 95       	ror	r20
    29a0:	37 95       	ror	r19
    29a2:	27 95       	ror	r18
    29a4:	ba 95       	dec	r27
    29a6:	c9 f7       	brne	.-14     	; 0x299a <__ultoa_invert+0xa2>
    29a8:	62 0f       	add	r22, r18
    29aa:	73 1f       	adc	r23, r19
    29ac:	84 1f       	adc	r24, r20
    29ae:	95 1f       	adc	r25, r21
    29b0:	a0 1d       	adc	r26, r0
    29b2:	08 95       	ret

000029b4 <_exit>:
    29b4:	f8 94       	cli

000029b6 <__stop_program>:
    29b6:	ff cf       	rjmp	.-2      	; 0x29b6 <__stop_program>
